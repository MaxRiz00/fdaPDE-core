// This file is part of fdaPDE, a C++ library for physics-informed
// spatial and functional data analysis.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <gtest/gtest.h>   // testing framework
#include <cstddef>

#include <fdaPDE/utils.h>
#include <fdaPDE/fields.h>
#include <fdaPDE/mesh.h>
#include <fdaPDE/finite_elements.h>
using fdapde::core::Element;
using fdapde::core::Integrator;
using fdapde::core::LagrangianBasis;
using fdapde::core::FEM;
using fdapde::core::MatrixConst;
using fdapde::core::MatrixPtr;
using fdapde::core::ScalarPtr;
using fdapde::core::VectorPtr;

using fdapde::core::PDE;
using fdapde::core::ScalarField;
using fdapde::core::advection;
using fdapde::core::reaction;
using fdapde::core::diffusion;
using fdapde::core::laplacian;
using fdapde::core::dt;
using fdapde::core::fem_order;
using fdapde::core::make_pde;
using fdapde::core::PDEparameters;
using fdapde::core::DiscretizedMatrixField;
using fdapde::core::DiscretizedVectorField;
using fdapde::core::Divergence;

#include "utils/mesh_loader.h"
using fdapde::testing::MeshLoader;
#include "utils/utils.h"
using fdapde::testing::almost_equal;
using fdapde::testing::DOUBLE_TOLERANCE;
using fdapde::testing::read_csv;

// #include <iomanip>
#include <string>
// tests for Advection Dominated Elliptic Partial Differential Equations

TEST(transport_test, TestCase0) {
    constexpr std::size_t femOrder = 1;

    // define exact solution
    auto solutionExpr = [](SVector<2> x) -> double {
        return 3*sin(x[0]) + 2*x[1];
    };

    SVector<2> b;  b << 1., 1.;
    double mu = 1e-9;

    // non-zero forcing term
    auto forcingExpr = [&mu, &b](SVector<2> x) -> double {
        return 2*b[1] + 3*b[0]*cos(x[0]) + 3*mu*sin(x[0]);
    };
    ScalarField<2> forcing(forcingExpr);   // wrap lambda expression in ScalarField object

    PDEparameters<decltype(mu), decltype(b)>::destroyInstance();
    PDEparameters<decltype(mu), decltype(b)> &PDEparams =
            PDEparameters<decltype(mu), decltype(b)>::getInstance(mu, b);

    auto L = - mu * laplacian<FEM>() + advection<FEM>(b);
    MeshLoader<Mesh2D> unit_square("unit_square_32");
    // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(unit_square.mesh.n_nodes(), 1);

    PDE< decltype(unit_square.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(mu),
            decltype(b)> pde_( unit_square.mesh, L, boundary_matrix); //, forcing);
    pde_.set_forcing(forcing);

    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);
    DMatrix<double> solution_ex(nodes_.rows(), 1);

    // set exact sol & dirichlet conditions
    for (int i = 0; i < nodes_.rows(); ++i) {
        solution_ex(i) = solutionExpr(nodes_.row(i));
        dirichletBC(i) = solutionExpr(nodes_.row(i));
    }
    pde_.set_dirichlet_bc(dirichletBC);
    pde_.set_stab_param(1.0);
    // init solver and solve differential problem
    pde_.init();
    pde_.solve();

    // check computed error
    DMatrix<double> error_ = solution_ex - pde_.solution();
    double error_L2 = (pde_.mass() * error_.cwiseProduct(error_)).sum();
    EXPECT_TRUE(error_L2 < 1e-7);

    // std::cout << "error_L2 = " << std::setprecision(17) << error_L2 << std::endl;
    // //storing solution
    // std::ofstream file("fdaPDE_SUPG_sol.txt");
    // if (file.is_open()){
    //     for(int i = 0; i < pde_.solution().rows(); ++i)
    //         file << pde_.solution()(i) << '\n';
    //     file.close();
    // } else {
    //     std::cerr << "transport test unable to save solution" << std::endl;
    // }
}

TEST(transport_test, TestCase1) {

    constexpr std::size_t femOrder = 1;

    // define exact solution
    SVector<2> b;
    b << 1., 0.;
    double nu = 1e-9;
    // double c = 0.;

    auto solutionExpr = [&nu](SVector<2> x) -> double {
        return x[0]*x[1]*x[1] - x[1]*x[1]*exp((2*(x[0] - 1))/nu) - x[0]*exp(3*(x[1] - 1)/nu) + exp((2*(x[0] - 1) + 3*(x[1] - 1))/nu);
    };

    // forcing term
    using std::exp;
    auto forcingExpr = [&nu, &b](SVector<2> x) -> double {
        return b[0]*(x[1]*x[1] - exp((3*x[1] - 3)/nu) - 2*x[1]*x[1]*exp((2*x[0] - 2)/nu)/nu + 2*exp((2*x[0] + 3*x[1] - 5)/nu)/nu) + b[1]*(2*x[0]*x[1] - 2*x[1]*exp((2*x[0] - 2)/nu) - 3*x[0]*exp((3*x[1] - 3)/nu)/nu + 3*exp((2*x[0] + 3*x[1] - 5)/nu)/nu) - nu*(2*x[0] - 2*exp((2*x[0] - 2)/nu) - 9*x[0]*exp((3*x[1] - 3)/nu)/(nu*nu) - 4*x[1]*x[1]*exp((2*x[0] - 2)/nu)/(nu*nu) + 13*exp((2*x[0] + 3*x[1] - 5)/nu)/(nu*nu));
    };
    ScalarField<2> forcing(forcingExpr);

    PDEparameters<decltype(nu), decltype(b)>::destroyInstance();
    PDEparameters<decltype(nu), decltype(b)> &PDEparams =
            PDEparameters<decltype(nu), decltype(b)>::getInstance(nu, b);

    auto L = - nu * laplacian<FEM>() + advection<FEM>(b); // + reaction<FEM>(c);

    MeshLoader<Mesh2D> unit_square("unit_square_32");
    // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(unit_square.mesh.n_nodes(), 1);

    PDE< decltype(unit_square.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b)> pde_( unit_square.mesh, L, boundary_matrix); //, forcing);
    pde_.set_forcing(forcing);

    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);
    DMatrix<double> solution_ex(nodes_.rows(), 1);

    // set exact sol & dirichlet conditions
    for (int i = 0; i < nodes_.rows(); ++i) {
        solution_ex(i) = solutionExpr(nodes_.row(i));
        dirichletBC(i) = solutionExpr(nodes_.row(i));
    }
    pde_.set_dirichlet_bc(dirichletBC);
    pde_.set_stab_param(1.075);

    // init solver and solve differential problem
    pde_.init();
    pde_.solve();

    // check computed error
    DMatrix<double> error_ = solution_ex - pde_.solution();
    double error_L2 = (pde_.mass() * error_.cwiseProduct(error_)).sum();
    EXPECT_TRUE(error_L2 < 1e-3);

    // std::cout << "error_L2 = " << std::setprecision(17) << error_L2 << std::endl;
    // //storing solution
    // std::ofstream file("fdaPDE_SUPG_sol.txt");
    // if (file.is_open()){
    //     for(int i = 0; i < pde_.solution().rows(); ++i)
    //         file << pde_.solution()(i) << '\n';
    //     file.close();
    // } else {
    //     std::cerr << "transport test unable to save solution" << std::endl;
    // }

}

TEST(transport_test, TestCase2){
    constexpr std::size_t femOrder = 1;

    // define domain
    MeshLoader<Mesh2D> domain("unit_square_32");
    // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);

    // define vector field containing transport data
    VectorField<2> b_callable;
    b_callable[0] = [](SVector<2> x) -> double { return std::pow(x[1], 2) + 1; };   // y^2 + 1
    b_callable[1] = [](SVector<2> x) -> double { return 2 * x[0]; };                // 2*x

    Integrator<FEM, 2, femOrder> integrator;
    DMatrix<double> quad_nodes = integrator.quadrature_nodes(domain.mesh);

    DMatrix<double, Eigen::RowMajor> b_data(quad_nodes.rows(), 2);
    for(int i = 0; i < quad_nodes.rows(); i++) {
        b_data.row(i) = b_callable(SVector<2>(quad_nodes.row(i)));
    }

    // construct it together with its divergence
    ScalarField<2> div_b_callable = div(b_callable);
    DVector<double> div_b_data(quad_nodes.rows());
    for(int i = 0; i < quad_nodes.rows(); i++) {
        div_b_data(i) = div_b_callable(SVector<2>(quad_nodes.row(i)));
    }

    DiscretizedVectorField<2,2> b_discretized(b_data, div_b_data);

    // coefficients
    double mu = 1e-9;

    // non-zero forcing term
    auto forcingExpr = [](SVector<2> x) -> double { return 1.; };
    ScalarField<2> forcing(forcingExpr);   // wrap lambda expression in ScalarField object

    PDEparameters<decltype(mu), decltype(b_discretized)> &PDEparams =
            PDEparameters<decltype(mu), decltype(b_discretized)>::getInstance(mu, b_discretized);

    // define differential operator
    auto L = -mu*laplacian<FEM>() + advection<FEM>(b_discretized);

    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(mu),
            decltype(b_discretized)> pde_( domain.mesh, L, boundary_matrix); //, forcing );
    pde_.set_forcing(forcing);

    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);

    // set dirichlet conditions
    for (int i = 0; i < nodes_.rows(); ++i) {
        dirichletBC(i) = 0.;
    }
    pde_.set_dirichlet_bc(dirichletBC);
    pde_.set_stab_param(2.285);

    // init solver and solve differential problem
    pde_.init();
    pde_.solve();

    // //storing solution
    // {
    // std::ofstream file("fdaPDE_SUPG_sol.txt");
    // if (file.is_open()){
    //     for(int i = 0; i < pde_.solution().rows(); ++i)
    //         file << std::setprecision(17) << pde_.solution()(i) << '\n';
    //     file.close();
    // } else {
    //     std::cerr << "transport test unable to save solution" << std::endl;
    // }
    // }

    std::vector<double> expected({
        -1.892120740240861e-34, -1.7303852195116085e-34, -2.031601296119556e-34, -2.5981319599139867e-34, -3.1937653801878811e-34, -3.5985252438699928e-34, -3.6726255626473256e-34, -3.4039850670369696e-34, -2.9072735373748266e-34, -2.35926962150705e-34, -1.8973602428554664e-34, -1.5490903896027974e-34, -1.2514522566637629e-34, -9.4357368356064797e-35, -6.2642417889028404e-35, -3.1374459587999602e-35, -3.4088152450962488e-37, 3.0575932152709322e-35, 6.1399770522388093e-35, 9.215329120195257e-35, 1.2285364775760175e-34, 1.5351308139146054e-34, 1.8414077419679399e-34, 2.1474369449618537e-34, 2.4532677752847415e-34, 2.7589127030156507e-34, 3.0644347596045292e-34, 3.3703425848156342e-34, 3.6727340391842701e-34, 3.9087370181762923e-34, 3.6975511627763576e-34, 1.6940798744371557e-34, -1.3215204587705555e-66, 4.5358467544833773e-35, 0.03873968271872405, 0.074313380762387207, 0.10254456047435287, 0.11965877528699513, 0.12360251215388833, 0.1152602929629607, 0.098726420675011223, 0.079994183951867012, 0.064371155164491017, 0.054133224315967281, 0.048203048177492484, 0.044138258115643328, 0.040507970837676509, 0.037292068881421246, 0.03459516267189424, 0.0322814269109334, 0.030264853327844232, 0.028491541303441403, 0.026919159154490287, 0.025514713808763665, 0.024252212922273739, 0.023110827309978765, 0.022073672708242818, 0.021126911197858943, 0.020259042849033005, 0.019460245513066167, 0.018722835932851411, 0.018043666301279054, 0.017384818289574899, 0.01631599173924269, 0.012634480203059991, -1.890362017845788e-34, -6.6417529100718466e-36, 0.029571095177945407, 0.060807106243203887, 0.094996433240941078, 0.13145020317650735, 0.16612598825106767, 0.19178677263826335, 0.20078942525048707, 0.18984537572330612, 0.16358057150386965, 0.13303892139238213, 0.10879992353464987, 0.094221613041233665, 0.085554307891764686, 0.078490169912205282, 0.072219100947922596, 0.066964089969715784, 0.062483069045870858, 0.058594772527098368, 0.055184983605239553, 0.052167256344441963, 0.049475157724694477, 0.047056979271480184, 0.044871670838106288, 0.042886222244568735, 0.041073732304228318, 0.039411622805726181, 0.037880693237585868, 0.036471439532081401, 0.035156077222985783, 0.033335434262889249, 0.02683890419930603, 1.8433714642173188e-34, 6.4428911298778738e-36, 0.031248350785834288, 0.061951771035993829, 0.092023235721334751, 0.12247330748656259, 0.15526455748842566, 0.19137474787699071, 0.2274815853877353, 0.25418387474936255, 0.25967868924657811, 0.23891753981163291, 0.2006952952009074, 0.16298530004721196, 0.13814644202998771, 0.12424889352023955, 0.11385191308271643, 0.10473027277462538, 0.097107781085500472, 0.090634111500888001, 0.085035584266267353, 0.080135863653165371, 0.075804936566324227, 0.071944070244867028, 0.068477170433618562, 0.065344287390145014, 0.062497539082470716, 0.0598977518716306, 0.057510959173593758, 0.055313251654413198, 0.053287994863775848, 0.050825992229005308, 0.042182346263734904, 6.1905055028078622e-34, 8.2694938807864033e-36, 0.030744629488900173, 0.061667678525004099, 0.092718387095143018, 0.12349177569073466, 0.15364774972669412, 0.18397125398741876, 0.21679829451164398, 0.25356745643267575, 0.28943232730467933, 0.31053029050670811, 0.30180161652394333, 0.2630371964860353, 0.21465422996338579, 0.17948431813964164, 0.16018184764077747, 0.14657595298084217, 0.13483388983508987, 0.12506785088198835, 0.11679492853940361, 0.1096570629611217, 0.10341791570431073, 0.097906613205083537, 0.092994571829076791, 0.088583455800914229, 0.084596291968641268, 0.080971707868275553, 0.077657566085057389, 0.074609145843321692, 0.071800796793412849, 0.068669491006122366, 0.058294278260641347, 1.105390882584268e-33, 1.2858308780140975e-35, 0.030511928435254156, 0.061028410817102967, 0.091631062513405914, 0.12246498853553098, 0.15350749034294542, 0.18430783177230126, 0.21445801522331814, 0.24509968965266618, 0.27931413638431446, 0.31750441238717214, 0.34914386963917365, 0.35332234668567136, 0.31834064540728291, 0.26216121403135206, 0.21760724282049651, 0.19328478577883745, 0.17669110765594714, 0.16258755318850923, 0.15092074612145992, 0.14105102323773977, 0.13254725248672847, 0.12511810795742037, 0.11855623929537207, 0.11270660256764235, 0.10745133847494277, 0.1026985745995125, 0.098372996499986501, 0.09440500257470498, 0.090736839092579041, 0.086831478746973001, 0.074890965405405574, 1.6354726435539708e-33, 1.8251431390996139e-35, 0.030196479340514049, 0.060438256797242192, 0.090748741228973681, 0.12114745716477213, 0.15172509585818172, 0.18263735304672543, 0.21378904296070056, 0.24454388251940404, 0.27468746170667085, 0.30658532152391121, 0.34379901536555924, 0.38115852071928369, 0.39635877298851235, 0.36668300478245042, 0.30459940528216661, 0.25206729235830416, 0.22353137806275319, 0.20426622740442171, 0.18808826833190045, 0.174770200255187, 0.16350656552434928, 0.15380694389878813, 0.14533205929534604, 0.13784353667495244, 0.13116382264382742, 0.12515852352943879, 0.11972113875128122, 0.1147532953338354, 0.11014746019085246, 0.10532981546598486, 0.09177796455488034, 2.2042563203235199e-33, 2.4572895921819583e-35, 0.029829580991915763, 0.059705187364705488, 0.089675813389629752, 0.11978336142992228, 0.15004463868210219, 0.18048130913663493, 0.21121792974254699, 0.24240213680055706, 0.27369152067875269, 0.30423323137136871, 0.33491993460597719, 0.37023337481242413, 0.41005505708818601, 0.43370105175943185, 0.40889292883788014, 0.34164475559547025, 0.28270105381455707, 0.25097635808913066, 0.22940973221694586, 0.21146326537809018, 0.19673936475268983, 0.18427810460427396, 0.17354463526736746, 0.16416001438870642, 0.15586073806067344, 0.14845083714151816, 0.14178054264643966, 0.13571617072129982, 0.13008853232043388, 0.12420964764630599, 0.10883748630060663, 2.809805237625655e-33, 3.1854155659703139e-35, 0.029418846979123177, 0.058888287330731766, 0.088457445480993518, 0.11817552390017175, 0.14809213484453687, 0.17824093653650008, 0.20862332681917486, 0.23928074016980203, 0.27040109641201915, 0.30198669775055959, 0.33317578971177714, 0.36358386119822611, 0.39716933273193183, 0.43765606842924359, 0.46745290364825365, 0.44586506201291304, 0.3733235895758561, 0.3096113258050987, 0.27575431264152089, 0.25226548751599515, 0.23286082330324331, 0.21696338103981103, 0.20348889446342164, 0.19187217742040039, 0.18170339564368659, 0.17269956705177439, 0.16464831940436342, 0.15736933505666326, 0.15062163745203144, 0.14352761570375164, 0.12600936357889497, 3.4530198716140245e-33, 4.0081116020504126e-35, 0.028966349306362566, 0.057987269542027486, 0.087116522881218281, 0.11640563119641206, 0.14590343133269296, 0.17565915212810559, 0.20571822631519418, 0.23609330816178234, 0.26677274219811953, 0.29787425510138743, 0.32960273568674209, 0.36139474095407204, 0.39208624996056829, 0.42444327266111942, 0.46481063877512624, 0.49900827630228378, 0.47824104292831621, 0.39986261567223325, 0.33310046207293376, 0.29805621969409146, 0.27300446517321281, 0.25244124218760011, 0.23558285351871863, 0.22126407729256978, 0.20890108333082555, 0.19806143627817965, 0.18844539467813276, 0.17980633087874995, 0.17181811638959546, 0.16334486089336181, 0.14327240669666111, 4.1371114651229746e-33, 4.9255848178542403e-35, 0.028476776635598288, 0.057011177565459821, 0.0856601966168649, 0.11447960607344024, 0.1435228277591552, 0.17283921883112607, 0.20247535806978254, 0.23247889820223058, 0.262879637257661, 0.29365340707454357, 0.32482707740763955, 0.35665629297344237, 0.38893436783522611, 0.42018706422290131, 0.45178935530262365, 0.49189153129594937, 0.5291797926404298, 0.50632969801720662, 0.42163021310931242, 0.35359188204640862, 0.31810151231948114, 0.29181442907118971, 0.27036866986326086, 0.25273845707368497, 0.23772665045428981, 0.22473869675505923, 0.21332377788435344, 0.20314366410770554, 0.19376425120484597, 0.18372666890796577, 0.16063017720815781, 4.8670395053431838e-33, 5.9377976080643526e-35, 0.027954521921093888, 0.055969065897342254, 0.084103139653879541, 0.11241526861676429, 0.14096246022495981, 0.16979941165727808, 0.19897659209986202, 0.2285388693475125, 0.25853055087010979, 0.28899178625009569, 0.31991012546953185, 0.35124502872811819, 0.38320537874427979, 0.41587216636032653, 0.44780366466099319, 0.47897416615103194, 0.51908805489579324, 0.55831099769797632, 0.53016623214803726, 0.43912596132797482, 0.37155521474154923, 0.3361158855534519, 0.30888969327214261, 0.2868043905191438, 0.26856649557501577, 0.25299299957591714, 0.23947852551785803, 0.2275274713507727, 0.21656707716214363, 0.20474623371514922, 0.1781026200660723, 5.6490685984039714e-33, 7.0447193067892951e-35, 0.027404024330420992, 0.054869782122399832, 0.082458631858126463, 0.11023126756779356, 0.13824724923404616, 0.16656443282702554, 0.19523831799276845, 0.22432049559914985, 0.2538556467126093, 0.28388357902288858, 0.31444612088155011, 0.34554958179849821, 0.37711891388051461, 0.40927425165659981, 0.44227578585024363, 0.4749285720336518, 0.50582854981498682, 0.54654674328458874, 0.58634341622629993, 0.54964639068013366, 0.452973355581407, 0.38744370292294006, 0.35231799868743074, 0.32442208783728721, 0.30190149204104366, 0.28319361338303412, 0.26716010543310609, 0.25314442865207182, 0.24036106084201306, 0.22649068692612531, 0.19572313841154876, 6.4905251211629141e-33, 8.24633938472543e-35, 0.02682969338964028, 0.053722187975197108, 0.080740029967930629, 0.10794539060308207, 0.13539976963850431, 0.16316354456603085, 0.19129532481059439, 0.21985122761461678, 0.24888371614944554, 0.27843825806708133, 0.30855138187589537, 0.33926064463954209, 0.37058797690944811, 0.4024501152562065, 0.43487194216842506, 0.46819892228753246, 0.50157221557255893, 0.53226186154688404, 0.57440153343380995, 0.61286858389296406, 0.56468674866504054, 0.46388902399863469, 0.40165020770521437, 0.36691365228511591, 0.33859313671935176, 0.3157984031120406, 0.29671980568771655, 0.28023266483560233, 0.26531815140697101, 0.24906837507043139, 0.21353985351939195, 7.3997713807997316e-33, 9.5426518177999113e-35, 0.026235822676834497, 0.052534920754477028, 0.078960420762650016, 0.10557532578891628, 0.13244236102109722, 0.15962370178691215, 0.18718052058355367, 0.21517226550758947, 0.24365574310587584, 0.27268409291827284, 0.30230388201780833, 0.33255018979122231, 0.36345359540072197, 0.39504496641715725, 0.42724862564997962, 0.4600015190008267, 0.49368866188198179, 0.52772654860621682, 0.55828363388775115, 0.60272447934295981, 0.6372060007120216, 0.57536662433668717, 0.47262432669747084, 0.41448486135327645, 0.38009347583025849, 0.35156421437976282, 0.32859649366856097, 0.30912324270031261, 0.29165734314790198, 0.27261885500046368, 0.23161961322695496, 8.3863834140143664e-33, 1.093365770338728e-34, 0.025626536456616562, 0.051316284375425819, 0.077132397915502957, 0.10313812546741813, 0.1293967788015136, 0.15597160185672884, 0.18292549622771306, 0.21032054479169351, 0.23821722336200701, 0.2666732621275511, 0.29574246950484007, 0.32547241729587462, 0.3558983424137348, 0.38704306322632087, 0.41894087295451682, 0.45152917869362413, 0.48466505662697046, 0.51878952428713654, 0.55335069579123086, 0.58402283435508806, 0.63143292873824242, 0.65852951561678041, 0.58201509642674498, 0.47989208742172407, 0.42617182149484029, 0.39202630318893805, 0.36344518327335068, 0.3402365349038407, 0.31968106388389278, 0.29732189715123059, 0.25005494028199854, 9.4614911025661526e-33, 1.2419364207900045e-34, 0.025005742702730271, 0.050074155103578336, 0.075267926398016508, 0.10065002249078206, 0.12628376126144519, 0.15223280587515145, 0.17856103735027753, 0.20533225953286871, 0.2326096794383111, 0.26045505243117545, 0.28892734551522103, 0.31808122292314567, 0.34796497519292441, 0.37861542969610434, 0.41004651750783788, 0.4422960877426847, 0.47530681088963278, 0.50886878658864121, 0.54353733772738133, 0.57838338630250852, 0.60972054360197248, 0.66019897748766843, 0.67603383911145765, 0.58522362266617345, 0.48629669800409997, 0.4368528527336546, 0.40282038615507981, 0.37413350524919903, 0.34978261733951743, 0.32342794869218883, 0.26897042142163641, 1.0638372279583911e-32, 1.3999784426232552e-34, 0.024377097493542572, 0.048815907364616024, 0.073378224108079829, 0.098126267382481633, 0.12312284504944593, 0.14843145162858237, 0.17411627058109017, 0.20024203901460749, 0.22687372158752434, 0.25407593175720511, 0.28191199920821131, 0.31044246695798083, 0.33972320833612085, 0.36980273112373913, 0.40072163140538875, 0.43247992600650359, 0.46513181154900579, 0.49859241060856851, 0.53262920541443082, 0.56794421229033254, 0.60278077359366189, 0.63567764085252132, 0.68840648867963694, 0.68910609717506577, 0.58578537337356651, 0.49227544822731151, 0.446555474472971, 0.41231561201322631, 0.38243355097466813, 0.35127568350774763, 0.2885429848328715, 1.1932992413080353e-32, 1.5674934084114502e-34, 0.023743978893368115, 0.047548359201317579, 0.071473673978634619, 0.09558099809029344, 0.11993218163760526, 0.14459003426712208, 0.16961843535812937, 0.19508233686438428, 0.22104761380701249, 0.24758070165738161, 0.27474794797090946, 0.30261458400874619, 0.33124306146460719, 0.36069101133653036, 0.39100601746385105, 0.42223741946936444, 0.45435646605521723, 0.48747142288602241, 0.52138936717684814, 0.55597705140654363, 0.5919835897338227, 0.62656580769846348, 0.66215933739407162, 0.71518230296737595, 0.69745430023549493, 0.58457175993405697, 0.49801409134805458, 0.45494671144460275, 0.41900280156105602, 0.38123713535621595, 0.30902195695979878, 1.3365542474235074e-32, 1.7444839002632515e-34, 0.023109473665127327, 0.04627774462508967, 0.069563779115192875, 0.093027172663513485, 0.11672843778652835, 0.14072925613352077, 0.16509267595355734, 0.18988322873030061, 0.21516692905276633, 0.24101110821242075, 0.26748401274656342, 0.29465408065100335, 0.32258880004672558, 0.35135282037214105, 0.38100645020243262, 0.41159355522457541, 0.44318366172470286, 0.47568488449864971, 0.50934204793705551, 0.54369243623062047, 0.57895488348566748, 0.61558731626209384, 0.64986595868909713, 0.68927996373932487, 0.73949334681743217, 0.70113851301167962, 0.58231962426735506, 0.50312159888547736, 0.46003023018034905, 0.41444951069132968, 0.33066542292206663, 1.4963092910496708e-32, 1.930950687662575e-34, 0.022476362055793068, 0.045009679989078878, 0.067657106131628938, 0.090476484077166255, 0.11352667610003288, 0.13686786645363674, 0.16056182657911416, 0.1846721224728802, 0.20926423623820617, 0.23440556250638211, 0.26016522493898592, 0.28661363567446879, 0.31382169404359589, 0.3418595292008057, 0.37079415823054507, 0.40069026524468748, 0.43158176417749716, 0.46358209657557281, 0.4964673806181657, 0.53077667847361498, 0.56548853037985436, 0.60160647028998482, 0.63866209268471485, 0.67291680512500596, 0.71689722156695757, 0.76024963150586744, 0.70040719692808917, 0.57909403723276665, 0.50506995702384139, 0.4517342654531441, 0.3542406722266021, 1.6752571760134655e-32, 2.1269019962731121e-34, 0.021847142827000215, 0.043749218657491623, 0.065761372960519343, 0.087939480994381661, 0.11034050218859105, 0.1330228201562233, 0.15604655878995519, 0.17947386010674723, 0.2033691026766182, 0.22779902998766149, 0.25283274518037646, 0.27854151121916237, 0.30499827065851848, 0.33227676415710433, 0.36045019217775359, 0.38958784856339962, 0.41976194475072887, 0.45098416327796798, 0.48345609879511964, 0.51669655356968425, 0.55181829776787639, 0.58675697143492223, 0.62396019611948028, 0.66112195359734693, 0.69601649911035701, 0.74451267466632476, 0.77624625143510195, 0.69499900262828418, 0.57228711411606004, 0.49189294985760884, 0.38056778166215732, 1.8797647257633866e-32, 2.3323209784140256e-34, 0.021223957276887629, 0.042500681455620283, 0.063883167520635789, 0.085425162834640467, 0.10718153740503104, 0.12920864680436872, 0.15156468173074877, 0.1743099948431141, 0.19750739045965721, 0.22122235517922748, 0.24552319653301902, 0.27048104143938312, 0.29616962573958711, 0.32266477779761671, 0.35004345112303586, 0.37838242575739017, 0.40775270982317996, 0.43823952170843289, 0.46981088634965795, 0.50283143961628718, 0.53635062075117546, 0.5725284366540816, 0.60746504060997408, 0.64600970915232536, 0.68291883261992203, 0.71940732239007521, 0.77104714789788664, 0.78543340774534576, 0.681521584594036, 0.54818140529459425, 0.40856464384650504, 2.118768741799742e-32, 2.5472811052989478e-34, 0.020608872694508285, 0.04126827581630442, 0.062028954374832947, 0.082942402681640631, 0.10406124180926114, 0.12543959762310269, 0.14713347659253626, 0.16920113289521774, 0.19170341540304689, 0.21470407698851246, 0.2382700208475467, 0.26247144801513372, 0.28738185488466989, 0.31307780715796524, 0.33963838400635382, 0.36714410277429904, 0.39567594188500649, 0.42530532310282065, 0.45613903325413746, 0.48806819919941213, 0.52173598075307737, 0.55538568797883603, 0.59300295559136695, 0.62755330169028445, 0.66768659770650252, 0.70402443062667275, 0.7429625959277566, 0.79392725108411788, 0.78173223378338363, 0.64330255196407782, 0.44577503005685742, 2.3849245176810674e-32, 2.7715258513671829e-34, 0.020002967751838546, 0.040054100713782383, 0.060201832338045332, 0.080495361756714387, 0.1009850288907269, 0.12172268894145497, 0.14276208472883772, 0.1641592160297807, 0.18597270448235267, 0.20826414889830033, 0.23109845740389279, 0.25454412934392345, 0.27867344222296098, 0.3035624781183005, 0.32929089983031579, 0.35594135658591031, 0.38359823317913183, 0.41234749089959971, 0.44225877393383378, 0.47347222789878873, 0.50575663828679085, 0.54019467338966876, 0.57372220675039509, 0.61339678063538439, 0.64689966025513379, 0.68878657738045312, 0.72421318363391929, 0.76513322046878218, 0.80542826417614355, 0.74290202899420288, 0.51038644310419012, 2.7268310298961525e-32, 3.0060357133547306e-34, 0.019409587437748746, 0.038865188422084161, 0.058412901863505375, 0.078099491190972051, 0.097972759536446088, 0.11808194501954047, 0.1384781396680102, 0.15921472556130911, 0.18034781184663462, 0.20193665015778034, 0.22404400629088209, 0.24673647117855824, 0.27008469740793606, 0.29416353934483136, 0.31905204898227352, 0.34483323749982997, 0.37159346663412002, 0.39942095633938801, 0.42840727617040431, 0.45861697471205287, 0.49023709610462884, 0.52286076304501417, 0.55820764906491216, 0.59121547332537172, 0.63395221489791043, 0.6652248067962081, 0.7086966200164162, 0.74209124204372678, 0.77906449960769175, 0.77904920891882967, 0.5856426481161181, 3.2895669300442659e-32, 3.247039078419534e-34, 0.018822802453718906, 0.03768868716714404, 0.056641395762511995, 0.075725594014753761, 0.094987208222843969, 0.11447372990320223, 0.13423448151329401, 0.15432086173684431, 0.17478661128407227, 0.19568814644283411, 0.21708498852393096, 0.23904027595657765, 0.2616212985385607, 0.28489996028386605, 0.30895306804652484, 0.33386234998575332, 0.35971411308406043, 0.38659845797077058, 0.41460720816999391, 0.44383797062323727, 0.47434613893246619, 0.50637747063253602, 0.5393002344203297, 0.57566943865103659, 0.60757143109036438, 0.65499237997252191, 0.68179795665307763, 0.72537262807611469, 0.75134355441152256, 0.75850846600508182, 0.62090386572936573, 3.9853410951537937e-32, 3.5094880853136611e-34, 0.018269724783763125, 0.036582260726185964, 0.054979134787477998, 0.073501755788546563, 0.09219184917930541, 0.11109202923232026, 0.13024654409544559, 0.14970214053551312, 0.16950891707367299, 0.18972099966857228, 0.21039690834868924, 0.23159958438906789, 0.25339617748583332, 0.27585778587556276, 0.29905933842422566, 0.32307968866001952, 0.34800180424505806, 0.37391277538196566, 0.40090337540894544, 0.42906556708718024, 0.45850037158426038, 0.48924819528854724, 0.52161669442790171, 0.55472490516735329, 0.59208540104634644, 0.62206611038182258, 0.67671018975111197, 0.69442996649874367, 0.73165140988537691, 0.72716404375884769, 0.60864564955285438, 4.4453909421520999e-32, 3.7326440031232106e-34, 0.017651783836721242, 0.035337156348448563, 0.053094899825161121, 0.070967318024494991, 0.089000185285211683, 0.10724228573377682, 0.12574442007031988, 0.14455804042110182, 0.16373394376679504, 0.18332158579453853, 0.20336945002666432, 0.22392652349607539, 0.2450444615696124, 0.26677973364478313, 0.28919510561297529, 0.31236017976568686, 0.3363511167103837, 0.36124984171178481, 0.38714293322895682, 0.41412032374059382, 0.44227146507083764, 0.47169749273097672, 0.5024193394954658, 0.53479513114466126, 0.56772465530336103, 0.60560011878650022, 0.6325781729990364, 0.69811585067090343, 0.69598275423568956, 0.7024787534975685, 0.5796226022907861, 4.5777169877912172e-32, 4.1695708813592031e-34, 0.017356049601703068, 0.03476797144464315, 0.052274416358515617, 0.0699039420503621, 0.08767677367352332, 0.10560789668390543, 0.12371198504956968, 0.14200946850401908, 0.16053223935893279, 0.17932729870048905, 0.19845711663596138, 0.21799646334199149, 0.23802658478578656, 0.2586284373210469, 0.27987698204166461, 0.30183819976409754, 0.32456961357938025, 0.34812391820959521, 0.37255418171883842, 0.39791848559155335, 0.42428245021916405, 0.45171572896334444, 0.48030752358410128, 0.51005647818001409, 0.54134057754598885, 0.57295598924777413, 0.60974610182884292, 0.63231921971622562, 0.71296190065026022, 0.66257335646636573, 0.55244303734051847, 4.5833820672361206e-32, 3.7325628167171703e-34, 0.015841195085073662, 0.031648183721549546, 0.047445781093385826, 0.063304104819083634, 0.079328441437675215, 0.095647743407872687, 0.11239817846018733, 0.12970140600270752, 0.14764119121427441, 0.16624509252211689, 0.18547850126898927, 0.20525525131741632, 0.22546305562388949, 0.24599576446383059, 0.26678125417024806, 0.28779578748283152, 0.30906218239371785, 0.33063651442516606, 0.35259211521491601, 0.37500829256048507, 0.39796608175881693, 0.42154879483913033, 0.44583913989085106, 0.47093770373148064, 0.49685186487576105, 0.52394524347515115, 0.55113570222798858, 0.58284078648445992, 0.59917202911512835, 0.69565412702827545, 0.51520953016393145, 4.5871425252666735e-32, 7.357088445348099e-34, 0.019489222932110948, 0.039177262556363716, 0.059215637633950123, 0.079550181929195218, 0.099944829339477209, 0.12003792731344719, 0.13942640207547605, 0.15776106436418685, 0.17482797434678485, 0.19059130597312329, 0.20518457145637864, 0.21885585729158613, 0.23189043897974712, 0.24454156558976786, 0.25699303016854635, 0.26935934619796842, 0.2817112641537346, 0.29410606479106766, 0.30660666371751544, 0.31928554992937713, 0.33221965521203084, 0.34548453084227554, 0.35915236086901925, 0.37328921210304267, 0.38797080941023587, 0.40320177232024151, 0.41922667373155403, 0.43534772779442149, 0.45430040548550799, 0.46220276254358278, 0.55587740631939342, 4.5671830991726503e-32, -4.6300566522008261e-66, -2.2336722354148812e-34, -2.2606701750504288e-34, -1.7839115211961706e-34, -6.9152335951302585e-35, 1.13165790853438e-34, 3.7823118884054708e-34, 7.3187094635317437e-34, 1.1749998711151292e-33, 1.7040354119791853e-33, 2.3128507594480121e-33, 2.9956424120627206e-33, 3.7495994459102926e-33, 4.5762894217063586e-33, 5.4812905742968743e-33, 6.4724956952141548e-33, 7.5581549161524138e-33, 8.7457073008871847e-33, 1.0041813367439791e-32, 1.1453217211931891e-32, 1.2987685373193588e-32, 1.4654479334189903e-32, 1.6464331652038822e-32, 1.8429239654072562e-32, 2.0562405363024868e-32, 2.2877991969690397e-32, 2.5392457160291809e-32, 2.8118385951399246e-32, 3.1086270269170217e-32, 3.4267578157873167e-32, 3.7807559390495052e-32, 4.142575490720692e-32, 4.5070454137574892e-32
    });

    for (std::size_t i = 0; i < expected.size(); ++i) { EXPECT_TRUE(std::abs(pde_.solution()(i)-expected[i]) < 1e-6); }
}

TEST(transport_test, TestCase3){
    constexpr std::size_t femOrder = 1;

    // define domain
    MeshLoader<Mesh2D> domain("unit_square_32");
    // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);

    // define vector field containing transport data
    VectorField<2> b_callable;
    b_callable[0] = [](SVector<2> x) -> double { return std::pow(x[1], 2) + 1; };   // y^2 + 1
    b_callable[1] = [](SVector<2> x) -> double { return 2 * x[0]; };                // 2*x

    Integrator<FEM, 2, femOrder> integrator;
    DMatrix<double> quad_nodes = integrator.quadrature_nodes(domain.mesh);
    DMatrix<double, Eigen::RowMajor> b_data(quad_nodes.rows(), 2);
    for(int i = 0; i < quad_nodes.rows(); i++) {
        b_data.row(i) = b_callable(SVector<2>(quad_nodes.row(i)));
    }

    // construct it together with its divergence
    ScalarField<2> div_b_callable = div(b_callable);
    DVector<double> div_b_data(quad_nodes.rows());
    for(int i = 0; i < quad_nodes.rows(); i++) {
        div_b_data(i) = div_b_callable(SVector<2>(quad_nodes.row(i)));
    }

    // coefficients
    DiscretizedVectorField<2,2> b_discretized(b_data, div_b_data);
    double mu = 1e-5;
    double c = 1.;

    // non-zero forcing term
    auto forcingExpr = [](SVector<2> x) -> double { return 1.; };
    ScalarField<2> forcing(forcingExpr);   // wrap lambda expression in ScalarField object

    PDEparameters<decltype(mu), decltype(b_discretized), decltype(c)> &PDEparams =
            PDEparameters<decltype(mu), decltype(b_discretized), decltype(c)>::getInstance(mu, b_discretized, c);

    // define differential operator
    auto L = -mu*laplacian<FEM>() + advection<FEM>(b_discretized) + reaction<FEM>(c);

    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(mu),
            decltype(b_discretized), decltype(c)> pde_( domain.mesh, L, boundary_matrix); //, forcing );
    pde_.set_forcing(forcing);

    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);

    // set dirichlet conditions
    for (int i = 0; i < nodes_.rows(); ++i) {
        dirichletBC(i) = 0.;
    }
    pde_.set_dirichlet_bc(dirichletBC);
    pde_.set_stab_param(2.85);

    // init solver and solve differential problem
    pde_.init();
    pde_.solve();

    // //storing solution
    // std::ofstream file("fdaPDE_SUPG_sol.txt");
    // if (file.is_open()){
    //     for(int i = 0; i < pde_.solution().rows(); ++i)
    //         file << std::setprecision(17) << pde_.solution()(i) << '\n';
    //     file.close();
    // } else {
    //     std::cerr << "transport test unable to save solution" << std::endl;
    // }

    std::vector<double> expected({
        -1.7823018869905916e-34, -1.4976491316211812e-34, -1.6756393355988269e-34, -2.1160795722738202e-34, -2.5982560900933677e-34, -2.9252022870906406e-34, -2.9705368869139163e-34, -2.711334846978221e-34, -2.2275092660035249e-34, -1.6579963111366407e-34, -1.1279389538784026e-34, -6.8763298795922717e-35, -3.0496567897000179e-35, 7.5343717957985335e-36, 4.6358513945630685e-35, 8.4955696174141578e-35, 1.2334479964485235e-34, 1.6163093576921286e-34, 1.9984153785287783e-34, 2.379976859581638e-34, 2.7611428271330251e-34, 3.1420192950799098e-34, 3.5226802250642851e-34, 3.9031669035816401e-34, 4.2834649194546867e-34, 4.6634051564072517e-34, 5.0418935943252164e-34, 5.411327395163328e-34, 5.7289396718818914e-34, 5.8130270564422612e-34, 5.0851378477961683e-34, 2.2061691574787629e-34, -2.6698767952317399e-66, 1.903584467961133e-34, 0.037600507925984454, 0.070993509038877189, 0.09655471074711959, 0.11137767896077601, 0.11431451087978831, 0.1067304411543032, 0.092401926997667791, 0.07628513672447805, 0.062569209372542026, 0.053096011243699962, 0.047215147302441182, 0.04314473655403385, 0.039665670139661893, 0.036602461275990622, 0.034000559594360928, 0.031762181828524777, 0.02980808061165122, 0.02808649596596707, 0.026557404418618358, 0.02518960376607416, 0.023958394265750728, 0.022843948827657501, 0.021830139007147319, 0.020903641765367742, 0.020053186233284195, 0.019268642059140709, 0.018536988146037197, 0.017816790151160944, 0.016922560502077168, 0.015168738620456002, 0.010685509553498059, -2.0066607627594998e-34, 1.1547376116124545e-34, 0.029481368829849804, 0.059596116522759771, 0.091285652756557839, 0.12364117440404751, 0.15303312943097305, 0.17366071903707694, 0.1800202597073717, 0.1703830016900916, 0.14889236479030687, 0.12399680918981186, 0.10355281786405884, 0.09033917468797778, 0.082022326598231929, 0.075432185656671161, 0.069664543537260259, 0.064765710144295344, 0.060564627493112762, 0.056905248290785991, 0.053684690456004366, 0.050825224238274951, 0.048267044867997058, 0.045963259286480235, 0.043876487341509479, 0.041976411953060899, 0.040237800692352367, 0.03863847448161753, 0.037153963529336011, 0.035722984136519982, 0.034060283437604845, 0.030955973274279843, 0.022537688071172141, 1.496361667974563e-34, 1.3060781210733323e-34, 0.030628287219449355, 0.059889582367263446, 0.087881868238152264, 0.11557493135419332, 0.14446410979660532, 0.17489258140482, 0.20373252363239763, 0.22370634875339324, 0.22664900913760141, 0.20986392048904065, 0.18022756911907939, 0.1504952329014656, 0.12961977122921819, 0.11695920728792032, 0.10754597080148504, 0.099420733906511349, 0.092534158591703969, 0.086639986279692369, 0.081512719742108206, 0.077002237001217472, 0.07299685687074535, 0.069411586872506523, 0.066180280760663041, 0.063250415360838183, 0.060579127687805795, 0.058129359959214685, 0.055862798580782594, 0.053702790106255886, 0.051310276792102615, 0.047095504639927704, 0.03522296343869339, 5.5217701658510117e-34, 1.3388336849431999e-34, 0.030310023086930281, 0.059817509456096714, 0.0884629975973589, 0.11597642222756696, 0.14228486843776783, 0.16823341336663511, 0.19555157186495992, 0.22473560974818169, 0.2514847613338948, 0.26579241817314636, 0.25800338582958759, 0.22896231550945267, 0.19275472463430632, 0.16493837138058942, 0.14820621037097251, 0.13627763460650016, 0.12612716977834518, 0.11755359566537599, 0.1102231185509276, 0.10384974081347206, 0.098242076931094727, 0.093259291152847659, 0.088795094005994446, 0.08476713228196156, 0.081109718931382593, 0.077767219428917886, 0.074683768358469918, 0.071763170687143427, 0.068626630101750311, 0.063405284760299413, 0.048435860102297265, 9.9928428599831114e-34, 1.3923762213714156e-34, 0.030045413407801553, 0.059212302461138101, 0.087596686917613284, 0.1152958258219951, 0.1422418053927097, 0.16812376879375107, 0.19287665041824273, 0.21763341491099925, 0.24444363372444095, 0.27270692591391926, 0.29434741755114591, 0.29563181726188631, 0.27000092536380355, 0.22972275967684405, 0.19618138891765802, 0.17598515243519197, 0.16190261744082551, 0.15004939468088385, 0.14007343268231268, 0.13154528682535757, 0.12412891343452108, 0.11759879417442393, 0.11179027211386759, 0.10657969917053173, 0.10187096921189215, 0.097584739976963306, 0.093643244724570113, 0.089923424508335403, 0.086000180258222744, 0.079775547741849598, 0.061921703327117585, 1.4840904251338681e-33, 1.4593428600398897e-34, 0.029743770044867467, 0.058640742692006309, 0.086741538110546038, 0.11410158968244953, 0.14081544140103822, 0.16696291467314139, 0.1923962530805077, 0.21672023789956696, 0.24013262738891594, 0.26453483163329272, 0.29176123938106252, 0.31712167960251708, 0.32575637445280176, 0.30426348723369506, 0.26137582223092842, 0.22340707016039071, 0.20054062191890132, 0.18469880273992739, 0.17145368258978738, 0.1603383089708379, 0.15082935454449548, 0.14255259419552579, 0.13525590856674979, 0.12875609321543918, 0.12291525914744618, 0.11762285634577488, 0.11277373188814158, 0.10820994343607879, 0.10344299495508692, 0.096151372508701205, 0.075485137972128052, 2.0013890264694329e-33, 1.5375195360342468e-34, 0.029388273781077934, 0.057957076231631537, 0.085769814842607206, 0.1128774337990687, 0.13931687802889053, 0.16514075292409283, 0.1904500746730883, 0.21527196423080025, 0.23928304036058987, 0.26210316662768879, 0.28480968112572197, 0.31021745787770694, 0.33692187249434408, 0.35087046678431416, 0.33295515704396955, 0.28804200636112998, 0.24685509207939352, 0.22215535454037039, 0.2049448984285947, 0.19060047793081755, 0.17858283365818964, 0.16828609283151613, 0.1593102466366976, 0.15138373405894887, 0.14430890831673132, 0.13793280194363872, 0.13211515891841588, 0.12665461451934831, 0.12097836963414035, 0.11251498026204394, 0.088987998763170637, 2.5480278991636707e-33, 1.6275578534061025e-34, 0.028989123785010382, 0.057185812354596542, 0.084655938253795512, 0.11145871087125921, 0.13764430939346647, 0.16324601881470238, 0.18828694978239208, 0.21283061174012813, 0.23697863761149557, 0.26059651292910863, 0.28312635038980594, 0.30480430949349158, 0.32843309888534677, 0.35518692846425248, 0.37271558864954096, 0.35713384264787612, 0.31019693958175765, 0.26689487011060686, 0.24113893470465275, 0.22291570796716587, 0.2077389362885734, 0.19502760151473786, 0.18411148399683017, 0.17457628532061617, 0.16613640984270334, 0.15857886989341605, 0.15171689166247834, 0.14529545395787163, 0.13863574368109222, 0.12887108071563716, 0.10234075897764876, 3.1229333959949839e-33, 1.7294142332491296e-34, 0.028549707522186454, 0.056335970493170656, 0.083426795137374124, 0.10988257884379528, 0.13575651912025954, 0.16109480394136202, 0.18593070833430436, 0.21027610991407558, 0.23415220829463085, 0.25765515963846686, 0.28080555720483191, 0.30311072804747469, 0.32420148580821445, 0.34635688827539801, 0.37259470361527686, 0.39239340645719245, 0.37756602826473074, 0.32835465807323488, 0.28396553593716944, 0.25780709814783631, 0.23887580582234449, 0.22310245168954987, 0.20987630249353426, 0.19848444163764895, 0.18850665178884046, 0.17964230088494715, 0.17164038946127461, 0.16417848710872177, 0.15644930661319131, 0.1452367273968512, 0.11549145870183047, 3.726891197485531e-33, 1.8430706285560758e-34, 0.02807399493703135, 0.055414473551000112, 0.082091243809020664, 0.10816661461550342, 0.13369511593703745, 0.1587235161366293, 0.18329183788649009, 0.20743146801767759, 0.23115291970246848, 0.2544501012585792, 0.27737808945548592, 0.30003906842889905, 0.32210049672682584, 0.34285202710148244, 0.36385220712117833, 0.3894551126911634, 0.41053427659876818, 0.39473485514100709, 0.34303103242262623, 0.29852529940224565, 0.2724627783291077, 0.25307361936855888, 0.23690519170638305, 0.22331317999524317, 0.21156271272630497, 0.20122694295695251, 0.19196280926435097, 0.18336040747461951, 0.17445901471781228, 0.16163573991901628, 0.12841507676132222, 4.3622096700339064e-33, 1.9685331139169944e-34, 0.027566272686096766, 0.054429592415640077, 0.080660889735438043, 0.10632381630254664, 0.13147466844800126, 0.15616210771182726, 0.18042677464387091, 0.20430192574728925, 0.22781434699469111, 0.25097533860071791, 0.27376688451302161, 0.29619807859974234, 0.31839041221783604, 0.34017733743758, 0.36071442567933298, 0.38080332049905813, 0.40592375229480826, 0.42742839354026912, 0.40891592888948169, 0.35474093449082478, 0.31101306103395604, 0.28538335191718062, 0.26573675050434753, 0.24933889576239557, 0.23549800020167222, 0.22346808379602795, 0.21278213680951935, 0.20291205050671657, 0.19271306003501024, 0.17809692278837494, 0.14110514412725569, 5.032372779514453e-33, 2.1058035625338358e-34, 0.027030818248933539, 0.053389597618770809, 0.079147813282182955, 0.10436989533930141, 0.12911326179702567, 0.15342824817022049, 0.17735783605660307, 0.20093703359758594, 0.22419271071171679, 0.24714539631142657, 0.2698055156114002, 0.2921527692811054, 0.31415886044796942, 0.33592661452077477, 0.35742321512285213, 0.3777990968853398, 0.39714291621355502, 0.4220973782304947, 0.44311406843316625, 0.42027515850821967, 0.36399981640303047, 0.32182164925963053, 0.29681410144834963, 0.27706764982816917, 0.26056643332893092, 0.2465475727906154, 0.23422507838547085, 0.22292311335377946, 0.21127134515524396, 0.19465503127374392, 0.15356831076059785, 5.7417594841081776e-33, 2.2548843513287763e-34, 0.026471872748595998, 0.052302687477185222, 0.07756392711084123, 0.10232031839173869, 0.12662994656982288, 0.15054425378161421, 0.17410791383429144, 0.19735853684239876, 0.22032596878415792, 0.24303141469794889, 0.26548871505223881, 0.28770478722373749, 0.30966153200347257, 0.33130367032740704, 0.35269926419290148, 0.37391108086127706, 0.39413159491557498, 0.41285915511173071, 0.43803644836653621, 0.45744524858868907, 0.42896148671392781, 0.37131529386835926, 0.33128162931446775, 0.30696486845055199, 0.28723509646869444, 0.2706986576049108, 0.25646117354230974, 0.24350917164911159, 0.23021003238471496, 0.21135359734917825, 0.16582177926070013, 6.4954739547237994e-33, 2.415778741450364e-34, 0.025893578239195275, 0.051176896607956192, 0.075920952366354863, 0.10019031195196777, 0.12404330327848727, 0.14753208536712517, 0.17070257670030661, 0.19359423685245697, 0.2162396985728961, 0.23866405240872038, 0.26088353503573108, 0.28290569471042082, 0.30473143024739929, 0.32634719038753468, 0.34767582808677594, 0.3687518828283301, 0.38970448453118994, 0.40973339396437969, 0.42799839432789388, 0.45374654457121155, 0.47015929101748971, 0.43517599580507804, 0.37716656047320568, 0.3396529682317444, 0.31600234935337579, 0.29634492721276695, 0.27970397649625178, 0.26482472697204212, 0.24962789350044151, 0.22824913472859357, 0.17789310841637071, 7.2993030578944396e-33, 2.5884904694776582e-34, 0.025299919734675328, 0.050019977384249945, 0.074230243417954311, 0.097994707148973889, 0.12137153444679591, 0.1444132042747554, 0.1671665070542708, 0.18967238504616593, 0.21196560212718538, 0.23407426030644526, 0.25601905891249116, 0.27781179553793711, 0.29945464524254173, 0.32093967615373742, 0.34226230715830663, 0.36331718651605271, 0.38412469919076048, 0.40485708912530394, 0.42461822424450502, 0.44266070898294529, 0.46914525223595827, 0.48095296144372324, 0.43920578170585739, 0.38197525400078475, 0.34711590048354163, 0.32401648735774147, 0.3043303739155554, 0.28706227940591406, 0.26965826633218165, 0.24541685237366004, 0.18982182918322163, 8.1598009169880321e-33, 2.7730236526826566e-34, 0.024694680136611139, 0.048839309258838233, 0.072502644818742093, 0.095747727712780395, 0.11863219335927251, 0.14120846496329004, 0.16352381535370478, 0.18562028090864349, 0.20753440583909308, 0.22929679412352602, 0.25093148329336795, 0.27245512694271906, 0.29387538624612924, 0.31519063333707054, 0.33637912341998494, 0.35745764753190085, 0.37826606159325832, 0.3988580725057117, 0.41940946046125949, 0.4388015221904959, 0.45698086342290611, 0.48403749267765961, 0.489559630139147, 0.44141764842266218, 0.38606741482715856, 0.35373425175817413, 0.33089018724473279, 0.3105485034452079, 0.29046735593774259, 0.26296129738671215, 0.20166252863197071, 9.0844966170240298e-33, 2.9693826968339136e-34, 0.024081405353597121, 0.047641828513581626, 0.070748383437497994, 0.093462838558547798, 0.11584196976807411, 0.13793780094918037, 0.15979772104558529, 0.18146446360833401, 0.20297593100499922, 0.22436483938824964, 0.24565815280325839, 0.26687630359958309, 0.28803224740411698, 0.30912945740064696, 0.33016553383764052, 0.35109415878401945, 0.3719827364232372, 0.39255544543516485, 0.41299445375240512, 0.43338491106502025, 0.45231729570837659, 0.47109202523367277, 0.49811404060477432, 0.49580897817227126, 0.44220782329585673, 0.38960398700939081, 0.35930678287293233, 0.33583136660234675, 0.31232578984948189, 0.28101497319847857, 0.21349179199517895, 1.0082198106876015e-32, 3.1775721955336007e-34, 0.02346337915519138, 0.046433976455911324, 0.068976986942690582, 0.091152630456861145, 0.11301653566766519, 0.13462001848250238, 0.15601024638449879, 0.17723027677769743, 0.1983189533003496, 0.21931063957999772, 0.24023476383894524, 0.26111513634271805, 0.28196901777747629, 0.30280605895880625, 0.32362480205242949, 0.34442828476517989, 0.36512324422072634, 0.38588697682002349, 0.40621195748494049, 0.42657779095472775, 0.44678825323154236, 0.4652328336272869, 0.48507680237730916, 0.51097239402503547, 0.49964044847615308, 0.44188556855900407, 0.39238816350307909, 0.3628340646166594, 0.33574892496360326, 0.2997849879189059, 0.22540698969614464, 1.1163759792703535e-32, 3.3975968461109969e-34, 0.022843607121453991, 0.045221665241446191, 0.06719722801460648, 0.088828737738788757, 0.11017043045698301, 0.13127264315735016, 0.15218201700990819, 0.17294158702446466, 0.19359074419038791, 0.21416505114551865, 0.23469588711628253, 0.25520989188450682, 0.27572816574881387, 0.29626518839646404, 0.31682784737800002, 0.33740766804871886, 0.35802526519739231, 0.37849799271168988, 0.39922126359593108, 0.41925545239910067, 0.43964945971246017, 0.45961004175508391, 0.47764983619166151, 0.49891196007325783, 0.52213445993609264, 0.50101872082009602, 0.44039541596053194, 0.39324803735206931, 0.36071898133672853, 0.31971342356708921, 0.23754761876493671, 1.2342127680988601e-32, 3.6294613509884068e-34, 0.022224808627740272, 0.044010259412686652, 0.065417091936538399, 0.086501787259522345, 0.1073169851917346, 0.127911811816907, 0.14833211334000868, 0.16862058886245829, 0.1888168104899314, 0.20895711417140789, 0.22907433883494033, 0.24919738510122674, 0.26935055845977629, 0.28955264724733593, 0.30981567014563044, 0.33014463127139587, 0.35051964020622511, 0.37100059566853733, 0.39124187421306772, 0.41204036154579982, 0.43169832316871393, 0.45224051937549126, 0.47183396407983663, 0.48967965601550317, 0.51239944447558039, 0.53099124773305117, 0.49962238219462152, 0.43655514389839162, 0.38805123243054701, 0.340862229428192, 0.25022429309886551, 1.3632890567969843e-32, 3.8731704549176809e-34, 0.021609416032946447, 0.042804571655120735, 0.06364376553453345, 0.08418137623637402, 0.10446828391091408, 0.12455221047627479, 0.14447797620391037, 0.16428766733943939, 0.18402070545327115, 0.2037138044947685, 0.22340079588965911, 0.24311229537605034, 0.26287517790412157, 0.28271181966168513, 0.30263904682662984, 0.32266661381426703, 0.34279911955477205, 0.36299743069979507, 0.38339589213241859, 0.4033681420393036, 0.42440644730072363, 0.44354241399151229, 0.46435935207509055, 0.48343613099492466, 0.50137218286008023, 0.52503019202601697, 0.53650242596499231, 0.49393668422697307, 0.42581480950781425, 0.36344813917611679, 0.26355503983520323, 1.5068846353372252e-32, 4.1287283653351173e-34, 0.020999578584034888, 0.041608867865543478, 0.061883640174924613, 0.081876069366940127, 0.10163515032252413, 0.12120704499340409, 0.14063535441469469, 0.15996131309590039, 0.17922389860420276, 0.19845984483116691, 0.21770354221903984, 0.23698680194014776, 0.25633845352559054, 0.27578373697134972, 0.29534344255767625, 0.31503272633161722, 0.33485906536342402, 0.35482896965240862, 0.37487195598636358, 0.39524826923093903, 0.41487591565574755, 0.43639364396921532, 0.45476960493829893, 0.47596812165190328, 0.49434793696664764, 0.51254169266775829, 0.53560731889033897, 0.5362076045065729, 0.47868506853681725, 0.39358735007054396, 0.27747573386527058, 1.6674239910330083e-32, 4.3961414359069643e-34, 0.020397176300977184, 0.0404268923903712, 0.060142345594086086, 0.079593437789029706, 0.098827187288869994, 0.11788807490689869, 0.13681832480398279, 0.15565811797447124, 0.17444573298304181, 0.19321760470611107, 0.21200828718684003, 0.23085030105840471, 0.24977383905613246, 0.26880629471199613, 0.28797156974826338, 0.30728910893598282, 0.32677259463418656, 0.34642688147817946, 0.3662635922041077, 0.38616454010019075, 0.40658333753204379, 0.42574145300003358, 0.44809105562953933, 0.46531717776566778, 0.48692455544739011, 0.50431292799689098, 0.52232094084657132, 0.54115193285749408, 0.52337442893406372, 0.43758758124092628, 0.29554907049190887, 1.8432592394932737e-32, 4.6754034416117329e-34, 0.019803810923351164, 0.039261846965387218, 0.058424713558810688, 0.077340005130601602, 0.096052704489802909, 0.11460552329887731, 0.13303918501452686, 0.15139264928063786, 0.16970327390025369, 0.18800690708977619, 0.20633789865713908, 0.22472901391382397, 0.24321122816952315, 0.26181337203483401, 0.28056158813778626, 0.2994785489071366, 0.31858238165945363, 0.33788529081431035, 0.35738868124925188, 0.37711302221891413, 0.39687345025198639, 0.41739434599300818, 0.43589614725624515, 0.45959498084152506, 0.47501451163944969, 0.49682204660445467, 0.51245901413027217, 0.52797392624407902, 0.53384564938648826, 0.47916297385693907, 0.32307988634333812, 2.0616751010977557e-32, 4.9665773804635123e-34, 0.019220936513220439, 0.03811665007644955, 0.056735165806733594, 0.075121757626521166, 0.09331933249927131, 0.11136876148096202, 0.12930915947173882, 0.14717811309217518, 0.16501185343611557, 0.1828453673800231, 0.20071243779874748, 0.2186455997255724, 0.23667599589344873, 0.25483310981043117, 0.2731443457589105, 0.29163441236177523, 0.31032445168004813, 0.32923085578854372, 0.34836392749188266, 0.36772016169025712, 0.38733225006668637, 0.40693085021614628, 0.42758379186289203, 0.44516777884264042, 0.47096233141916116, 0.48341781980664283, 0.50455266015510869, 0.51612377882665128, 0.52173760999152519, 0.49282728035862666, 0.35159932826080942, 2.3772792901523305e-32, 5.2693231974441465e-34, 0.018649259238466404, 0.036992739100461206, 0.055075908835762591, 0.072941747210635607, 0.090631096893811547, 0.10818296906024352, 0.12563479844819142, 0.14302264965323372, 0.16038137513387332, 0.17774472281348586, 0.19514538605505757, 0.21261498339468601, 0.23018395274218573, 0.24788134480376831, 0.26573449841021685, 0.28376856987674948, 0.30200586820695507, 0.32046492424291245, 0.33915922009310373, 0.35809607348223699, 0.37726500204894675, 0.39671267802873733, 0.41607478970553913, 0.43680570497571808, 0.45312279137859118, 0.48204863491027894, 0.4893778630743249, 0.50715154869888213, 0.50776414941533854, 0.48260384755778041, 0.36284938966162195, 2.7358263792282517e-32, 5.5857254942317751e-34, 0.018092196145020393, 0.035896912782542152, 0.053457164273223667, 0.070813573505088295, 0.088004733124388751, 0.10506750947676592, 0.12203729330978794, 0.13894819348361861, 0.15583317146284856, 0.1727241172940194, 0.18965186523076288, 0.20664614008803653, 0.22373542268105137, 0.24094673178588427, 0.25830533526294519, 0.27583440452186392, 0.29355459632451841, 0.31148348876202409, 0.32963474307198293, 0.34801684831211077, 0.36663247955050049, 0.38546215253908706, 0.40456569680270998, 0.42348870583893999, 0.44405197737233387, 0.4586516293936953, 0.49203289411496975, 0.48992785346418571, 0.49684381479668116, 0.46708852057730882, 0.35551082705688358, 2.9785703209088503e-32, 5.9027078678851596e-34, 0.017536002397529817, 0.034802259705567155, 0.051838993023273945, 0.06868479393006327, 0.0853766379188165, 0.10194988227974162, 0.11843818357056063, 0.13487332710414562, 0.15128502656368914, 0.16770079896254406, 0.1841460066360831, 0.2006440740422562, 0.21721677755120314, 0.2338844478845527, 0.25066596819456011, 0.26757857000562096, 0.28463752812346793, 0.30185584079884914, 0.31924384798866007, 0.33680858357721843, 0.35455256964792831, 0.37247377216288896, 0.39054440591895601, 0.40883483186024622, 0.42682957107862263, 0.44659746296247038, 0.45891161661951158, 0.49814311486011648, 0.47749828739176298, 0.45373283583837237, 0.34161858575433907, 3.0733563579898369e-32, 6.3058469825963035e-34, 0.017069274826934731, 0.033881531235470705, 0.050476763789463565, 0.066889076988773929, 0.083148083116339755, 0.099280047498650797, 0.11530896975359535, 0.13125737089214681, 0.14714655520607467, 0.16299636020839578, 0.1788246745481189, 0.19464709521431298, 0.21047694386265778, 0.22632557800842085, 0.24220273281214813, 0.25811667040021441, 0.27407415287734466, 0.29008046360726591, 0.30613965274599347, 0.32225486916913021, 0.33842830221464454, 0.35466009589621666, 0.37094865281725964, 0.38726541052520463, 0.40368906231858165, 0.41970226822067597, 0.43738320861808966, 0.44671894596843359, 0.49243592067251085, 0.43315091405526462, 0.32822842627069493, 3.1107792519339245e-32, 6.2114541273814045e-34, 0.016135071144042917, 0.032057363919946964, 0.047785034382800524, 0.063352171684079542, 0.078797707142649942, 0.094158997242710249, 0.10946718080456565, 0.12474261205660439, 0.13999016614596843, 0.15519563772895328, 0.17032521746405188, 0.18532964152788112, 0.2001530479255523, 0.2147444889386621, 0.22906854401840324, 0.24311151373383036, 0.2568814248418182, 0.27040268559441683, 0.28370826534017263, 0.29683263027316004, 0.30980732337065037, 0.3226590724106444, 0.33540879548387487, 0.34807315099589281, 0.3606400243399106, 0.37319341121878613, 0.38529890256524868, 0.39869573157668647, 0.40431560502987396, 0.45402435361089205, 0.3106421051732341, 3.1468366561175804e-32, 9.6403294157344326e-34, 0.018413206382274575, 0.036405199237402826, 0.054089949043184073, 0.071419840127124642, 0.088223314417731513, 0.10425897023541554, 0.11927930652354359, 0.13309190884080566, 0.14560397323152199, 0.15683926094355286, 0.1669244458269806, 0.17605159249195521, 0.1844310555107074, 0.19225092175007882, 0.19965436290838354, 0.20673738545600442, 0.21356099834132988, 0.22016778173143245, 0.22659442032207608, 0.23287686817283396, 0.23904975945904253, 0.24514376985061917, 0.25118367114478607, 0.25718742319036575, 0.26316806224061695, 0.26911649466644977, 0.27508614377836954, 0.28080451616439078, 0.28727454443929507, 0.28890700384527529, 0.33102466011687098, 3.1700007393829046e-32, -6.1461861695563057e-66, -2.1735620347804331e-34, -2.2678458169570631e-34, -1.8550977789958994e-34, -8.4636975654746192e-35, 8.4413025200473847e-35, 3.2817507805201147e-34, 6.4976595399164531e-34, 1.0483390203174961e-33, 1.5196385249387869e-33, 2.057551557215793e-33, 2.6561557942637784e-33, 3.3115328692201212e-33, 4.0227059189262036e-33, 4.7914544184162523e-33, 5.6212696425623747e-33, 6.5160661933057449e-33, 7.4792694775322909e-33, 8.5135788588087787e-33, 9.6212843620352147e-33, 1.0804757830850068e-32, 1.2066770905207337e-32, 1.3410521193088508e-32, 1.4839466541306568e-32, 1.6357128381801952e-32, 1.7966900255498848e-32, 1.9672156083257821e-32, 2.1474359160333924e-32, 2.3380566736852476e-32, 2.5370781527950613e-32, 2.751087284303053e-32, 2.9633235459140848e-32, 3.1637924189812157e-32
    });

    for (std::size_t i = 0; i < expected.size(); ++i) { EXPECT_TRUE(std::abs(pde_.solution()(i)-expected[i]) < 1e-6); }
}

TEST(transport_test, TestCase4) {
    constexpr std::size_t femOrder = 2;

    // define exact solution
    auto solutionExpr = [](SVector<2> x) -> double {
        return 3*sin(x[0]) + 2*x[1];
    };

    SVector<2> b;  b << 1., 1.;
    double mu = 1e-7;

    // non-zero forcing term
    auto forcingExpr = [&mu, &b](SVector<2> x) -> double {
        return 2*b[1] + 3*b[0]*cos(x[0]) + 3*mu*sin(x[0]);
    };
    ScalarField<2> forcing(forcingExpr);   // wrap lambda expression in ScalarField object

    // save parameters in the PDEparameters singleton, these will be retrieved by the solver
    PDEparameters<decltype(mu), decltype(b)>::destroyInstance();
    PDEparameters<decltype(mu), decltype(b)> &PDEparams =
            PDEparameters<decltype(mu), decltype(b)>::getInstance(mu, b);

    auto L = - mu * laplacian<FEM>() + advection<FEM>(b);
    MeshLoader<Mesh2D> unit_square("unit_square_16");
    // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(unit_square.mesh.n_nodes(), 1);

    PDE< decltype(unit_square.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(mu),
            decltype(b)> pde_( unit_square.mesh, L, boundary_matrix); //, forcing);
    pde_.set_forcing(forcing);

    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);
    DMatrix<double> solution_ex(nodes_.rows(), 1);

    // set exact sol & dirichlet conditions
    for (int i = 0; i < nodes_.rows(); ++i) {
        solution_ex(i) = solutionExpr(nodes_.row(i));
        dirichletBC(i) = solutionExpr(nodes_.row(i));
    }
    pde_.set_dirichlet_bc(dirichletBC);
    pde_.set_stab_param(1.0);
    // init solver and solve differential problem
    pde_.init();
    pde_.solve();

    // check computed error
    DMatrix<double> error_ = solution_ex - pde_.solution();
    double error_L2 = (pde_.mass() * error_.cwiseProduct(error_)).sum();
    EXPECT_TRUE(error_L2 < 1e-7);

    // // storing solution
    // std::cout << "error_L2: " << error_L2 << std::endl;
    // std::ofstream file("fdaPDE_sol.txt");
    // if (file.is_open()){
    //     for(int i = 0; i < pde_.solution().rows(); ++i)
    //         file << pde_.solution()(i) << '\n';
    //     file.close();
    // } else {
    //     std::cerr << "transport test unable to save solution" << std::endl;
    // }
}

TEST(transport_test, TestCase5){
    constexpr std::size_t femOrder = 2;

    // define exact solution
    auto solutionExpr = [](SVector<2> x) -> double {
        return 3*sin(x[0]) + 2*x[1];
    };

    SVector<2> b;  b << 1., 1.;
    double nu = 1e-3;

    // non-zero forcing term
    auto forcingExpr = [&nu, &b](SVector<2> x) -> double {
        return 2*b[1] + 3*b[0]*cos(x[0]) + 3*nu*sin(x[0]);
    };
    ScalarField<2> forcing(forcingExpr);   // wrap lambda expression in ScalarField object

    // save parameters in the PDEparameters singleton, these will be retrieved by the solver
    PDEparameters<decltype(nu), decltype(b)>::destroyInstance();
    PDEparameters<decltype(nu), decltype(b)> &PDEparams =
            PDEparameters<decltype(nu), decltype(b)>::getInstance(nu, b);

    auto L = - nu * laplacian<FEM>() + advection<FEM>(b);
    MeshLoader<Mesh2D> domain("nonConvex1");

    // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);
    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b)> pde_( domain.mesh, L, boundary_matrix); //, forcing);
    pde_.set_forcing(forcing);

    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);
    DMatrix<double> solution_ex(nodes_.rows(), 1);

    // std::cout << "nodes_.rows() = " << nodes_.rows() << std::endl;

    // set exact sol & dirichlet conditions
    for (int i = 0; i < nodes_.rows(); ++i) {
        solution_ex(i) = solutionExpr(nodes_.row(i));
        dirichletBC(i) = solutionExpr(nodes_.row(i));
    }
    pde_.set_dirichlet_bc(dirichletBC);
    pde_.set_stab_param(5.0);
    // init solver and solve differential problem
    pde_.init();
    pde_.solve();

    // check computed error
    DMatrix<double> error_ = solution_ex - pde_.solution();
    double error_L2 = (pde_.mass() * error_.cwiseProduct(error_)).sum();
    std::cout << "error_L2 = " << std::setprecision(17) << error_L2 << std::endl;
    EXPECT_TRUE(error_L2 < 1e-6);

    // // save solution
    // {
    // std::ofstream file("fdaPDE_SUPG_sol.txt");
    // if (file.is_open()){
    //     for(int i = 0; i < pde_.solution().rows(); ++i)
    //         file << pde_.solution()(i) << '\n';
    //     file.close();
    // } else {
    //     std::cerr << "transport test unable to save solution" << std::endl;
    // }
    // }

}

TEST(transport_test, TestCase6){
    constexpr std::size_t femOrder = 1;

    MeshLoader<Mesh2D> domain("nonConvex1");

    // define vector field containing transport data
    VectorField<2> b_callable;
    b_callable[0] = [](SVector<2> x) -> double { return std::log(x[0] + 5); };   // log(x+5)
    b_callable[1] = [](SVector<2> x) -> double { return -(x[1] + 1); };          // -(y+1)

    Integrator<FEM, 2, femOrder> integrator;
    DMatrix<double> quad_nodes = integrator.quadrature_nodes(domain.mesh);

    DMatrix<double, Eigen::RowMajor> b_data(quad_nodes.rows(), 2);
    for(int i = 0; i < quad_nodes.rows(); i++) {
        auto temp = b_callable(SVector<2>(quad_nodes.row(i)));
        if(std::isnan(temp[0]) || std::isnan(temp[1])) {
            std::cout << "nan value at while eval. vector field at " << quad_nodes.row(i) << std::endl;
            b_data.row(i) = DVector<double>::Zero(2); 
        }else{
            b_data.row(i) = b_callable(SVector<2>(quad_nodes.row(i)));
        }
    }
    // construct it together with its divergence
    ScalarField<2> div_b_callable = div(b_callable);
    DVector<double> div_b_data(quad_nodes.rows());
    for(int i = 0; i < quad_nodes.rows(); i++) {
        div_b_data(i) = div_b_callable(SVector<2>(quad_nodes.row(i)));
    }
    DiscretizedVectorField<2,2> b_discretized(b_data, div_b_data);
    double nu = 1e-3;

    // zero forcing term
    auto forcingExpr = [](SVector<2> x) -> double { return 1.; };
    ScalarField<2> forcing(forcingExpr);

    // save parameters in the PDEparameters singleton, these will be retrieved by the solver
    PDEparameters<decltype(nu), decltype(b_discretized)>::destroyInstance();
    PDEparameters<decltype(nu), decltype(b_discretized)> &PDEparams =
            PDEparameters<decltype(nu), decltype(b_discretized)>::getInstance(nu, b_discretized);

    auto L = - nu * laplacian<FEM>() + advection<FEM>(b_discretized);
    // define the Neumann and Dirichlet boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);
    DVector<int> NeumannNodes(54);
    NeumannNodes << 2, 6, 13, 24, 40, 60, 81, 102, 126, 151, 175, 200, 227, 252, 278, 303, 317, 340, 363, 370, 393, 414, 435, 441, 462, 484, 505, 524, 543, 563, 581, 600, 616, 632, 648, 661, 671, 681, 692, 700, 708, 715, 721, 727, 733, 740, 745, 746, 750, 751, 754, 755, 756, 757;

    for (size_t j=0; j<NeumannNodes.size(); ++j){
        int i = NeumannNodes(j);
        boundary_matrix(i, 0) = static_cast<short int>(1);
    }

    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b_discretized)> pde_( domain.mesh, L, boundary_matrix); //, forcing);
    pde_.set_forcing(forcing);

    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichlet_bc(nodes_.rows(), 1);

    for (int i = 0; i < nodes_.rows(); ++i) {
        dirichlet_bc(i) = 0.; // no slip condition
    }

    // set dirichlet conditions
    pde_.set_dirichlet_bc(dirichlet_bc);
    pde_.set_stab_param(5.0);

    DMatrix<double> boundary_quadrature_nodes = pde_.boundary_quadrature_nodes();
    DMatrix<double> f_neumann(boundary_quadrature_nodes.rows(), 1);
    for (auto i=0; i< boundary_quadrature_nodes.rows(); ++i){
        f_neumann(i) = 0;
    }
    pde_.set_neumann_bc(f_neumann);

    pde_.init();
    pde_.solve();
    
    // // save solution
    // {
    // std::ofstream file("fdaPDE_SUPG_sol.txt");
    // if (file.is_open()){
    //     for(int i = 0; i < pde_.solution().rows(); ++i)
    //         file << std::setprecision(17) << pde_.solution()(i) << '\n';
    //     file.close();
    // } else {
    //     std::cerr << "transport test unable to save solution" << std::endl;
    // }
    // }

    std::vector<double> expected({
        0, 0, 0.08820055042351356, 0.057201203285839601, 0, 0.11386301723086648, 0.1696910913271745, 0, 0, 0, 0, 0, 0, 0.24476123888326828, 0.12347670660095328, 0.062547806709816064, 0.19619808708514744, 0.053282960307373069, 0.053660895382457864, 0.052008185531245414, 0.048343266690986389, 0.045325623707205699, 0.044927550752841751, 0, 0.31354119863622604, 0.25084815188225945, 0, 0, 0, 0, 0.15552658966859037, 0.18784937883880831, 0.10373868716884624, 0.10459054607457953, 0.10686126413179903, 0.091319068483932203, 0.090399435021009625, 0.08799164197195411, 0.043694888156290773, 0.32263896446350576, 0.3771644071445765, 0.26837532044714185, 0.039722480961335981, 0.03884027723154114, 0, 0.042592413850128234, 0.041156760953403405, 0, 0, 0, 0.21314358448830092, 0.15893909716860474, 0.15781624900807401, 0.14570975345217976, 0.13649827044989915, 0.13300480021459507, 0.085960461148147468, 0.13019070981471467, 0.32219329747618541, 0.37974003232907022, 0.4359442677131925, 0.26928206994043402, 0.081441989548417554, 0.07865811299792666, 0.037364882824820228, 0.071890738784488539, 0.083179094433711853, 0.036733103096664416, 0.032776470169205964, 0.03387064117215699, 0, 0.23445644615603697, 0.20772658689452109, 0.18392967856501577, 0.18073383524170397, 0.17525640417926414, 0.12614988111331987, 0.16989868250903387, 0.38378516705588456, 0.3174957643066138, 0.43092575544062972, 0.48933651748491469, 0.12364157427715691, 0.11954429705692553, 0.10928538597229907, 0.074490782846060047, 0.1132970562923607, 0.071636486974607214, 0.065829554346819655, 0.066441020809101498, 0.032442153776890172, 0, 0.23081727868798588, 0.27946717210859756, 0.22595030974735084, 0.21868138910385965, 0.16393834885983333, 0.21174790659525633, 0.43224670502501861, 0.37742387104447117, 0.32942525429815583, 0.48540572585476105, 0.53954073692510629, 0.16151690593557969, 0.15524454178817065, 0.15319960675201916, 0.10894344541282333, 0.1413844462246599, 0.10114635687334091, 0.10367217417829712, 0.1029527041122225, 0.067576471817947639, 0.032387471539159295, 0, 0.27361661266376641, 0, 0.26114877786140439, 0.17951483095959372, 0.32230708276246089, 0.28803031022199566, 0.25250840227187976, 0.20476215296990838, 0.43085648300544399, 0.48060446140971508, 0.36899177359603513, 0.53207946377053394, 0.5847288370890722, 0.19656528912907367, 0.1885790870343409, 0.13686500471753746, 0.173544483506159, 0.13562801459345153, 0.13535470505097408, 0.099341708574249024, 0.13442766052907121, 0.065232542764359872, 0.03211991127105223, 0.032024130274631323, 0, 0.3055569788018293, 0.21515081066761577, 0.21886174123879956, 0, 0.29502724855179968, 0.35731021014725023, 0.27018381467942548, 0.23701430128114759, 0.46032971695573199, 0.4048219793431595, 0.51260578475631491, 0.56978130361380008, 0.62697969636693762, 0.17233008541362108, 0.21012550453382628, 0.17161770598045262, 0.17070355314710953, 0.10138658471424576, 0.13397254220873162, 0.17034785021052407, 0.066597000589878871, 0.062812569450227701, 0.030973607886453067, 0.34613860989225653, 0.25078842077144603, 0.26472582611119799, 0.030999471339978987, 0, 0.33554939097065439, 0.32652132610236412, 0.39171741769560009, 0.30219552094918739, 0.49494832081772777, 0.45403714639570092, 0.55188638828172176, 0.60728527800232601, 0.66619928674839324, 0.21583543624270629, 0.25785244121136441, 0.2083305543774415, 0.21313415726346399, 0.12955943395069347, 0.095620809980764263, 0.16433299918571781, 0.1884645841988204, 0.062919684256044384, 0.095801955445454987, 0.37661756323112172, 0.29144772962123233, 0.064318203898713455, 0.031736569667154289, 0, 0.39000695053482226, 0.36010734856890875, 0.25279036131167382, 0.42328872341404661, 0.33171194734830722, 0.48625124149089011, 0.52796983549047816, 0.58477647060963678, 0.64178502191464049, 0.70211894179271961, 0.24693382927798979, 0.29857303186873857, 0.25299517443773817, 0.2376369552730842, 0.13219342981963877, 0.16452548659111552, 0.20066251259931511, 0.097963582020102316, 0.13258036242939103, 0.064791676039606297, 0.099983026932357444, 0.032356543789634519, 0, 0.42249023407545722, 0.37548640829173885, 0.28703786367515549, 0.5771835788402323, 0, 0, 0.46928332765242192, 0.33043414007457861, 0.38686691465180528, 0.51718410541638238, 0.56784588009163484, 0.62221813937088877, 0.67776068884650709, 0.73542971265759471, 0.29424005081606386, 0.27621480773415541, 0.24117234872177512, 0.16835398243461802, 0.20387841201801435, 0.13329047279518785, 0.062930198103497731, 0.095612892393919513, 0.12933463700264658, 0.031008575193334418, 0.43631681059370825, 0.32807354547419904, 0.031458801933210774, 0.032249720358007154, 0, 0, 0, 0.48424077207991539, 0.3725670946715765, 0.41727825529517532, 0.53674732792090574, 0.58936340711134183, 0.64629647985374594, 0.70481003418703991, 0.76642907513188707, 0.34353609311460337, 0.31637405159760762, 0.28266658062430428, 0.2432890680352609, 0.17191637620677386, 0.20627871867622877, 0.16381081785340568, 0.064238911989580885, 0.096743248105211663, 0.13205685216942425, 0.16563974583104044, 0.46412166398667004, 0.065188639749749935, 0.066604720488739874, 0.03315697761689803, 0.03381894477349396, 0, 0.52557891883890273, 0.51267908104844528, 0.42853937928957697, 0.40099595794776072, 0.56490820056468616, 0.61865095652999957, 0.67535156713273548, 0.73383713134866435, 0.79551106119712323, 0.357755351283853, 0.32406643631442494, 0.28410845301196075, 0.24873172264115576, 0.19958202203926803, 0.22389050817905684, 0.099086347866665953, 0.16941018703653912, 0.13378194968932014, 0.20406296503529717, 0.47879068206899744, 0.10148824804759449, 0.068544798329066042, 0.034798529682698233, 0, 0.55354537696239625, 0.54124524600140089, 0.4564117444137849, 0.49255346996406757, 0.41065694141389064, 0.59235073113779801, 0.63691646780333877, 0.70207898901155341, 0.76096907793006996, 0.82240871774400848, 0.36798488886807934, 0.33122141591727644, 0.3023088810911308, 0.27450135455709468, 0.23840345791086426, 0.1370105736165052, 0.17206088230761149, 0.20920634691217047, 0.24398539988048445, 0.10372718755698536, 0.07026489514359012, 0.035925541139021556, 0, 0.84759241172046818, 0.60807384085214888, 0.072316380943198422, 0.5564591300367161, 0.50513308377699295, 0.45798393948972999, 0.42067751845701595, 0.66333015329903855, 0.72182760515484545, 0.78379439929923966, 0.38366324402925561, 0.3467901028674123, 0.31604158848617914, 0.28036339242288721, 0.1396868210437702, 0.17657065542001063, 0.21422560358006859, 0.24909815165492596, 0.28528640617137002, 0.10634101106071173, 0.037346837142355239, 0, 0.80409944964843327, 0.87092775910442033, 0.62349205096067939, 0.10916774792496031, 0.074991108514635058, 0.45415841432900983, 0.11256879256024774, 0.52080430280022949, 0.56862819951318866, 0.48836412698703402, 0.39886395537954555, 0.69026885170440422, 0.74857774699211521, 0.36218999167155336, 0.3232302482951549, 0.18027247702407886, 0.14339751592422692, 0.2185419181844338, 0.25316275346906586, 0.28941756794964096, 0.32923672497094336, 0.040736638657460349, 0, 0.82831154861271805, 0.89277621954900555, 0.61083762123632479, 0.14685737818650849, 0.08164031667024621, 0.45059001575370106, 0.15088166189189531, 0.12277286336719997, 0.91279177851918913, 0.53566387586757958, 0.49990676542291002, 0.40802240644378657, 0.70748410028577613, 0.65446342477966102, 0.76755899451862974, 0.36833553898351651, 0.22466734562290425, 0.18545520290774786, 0.25915324201385559, 0.2978769062461496, 0.33445357815862164, 0.37550091536306301, 0.042346481772587818, 0, 0.84790249550807362, 0.59894085817567766, 0.19020484550607705, 0.085345738376245012, 0.46272605684060919, 0.16447263954048211, 0.12701757816674814, 0.93266713746000995, 0.26422928073095514, 0.34211178487970928, 0.55144555745260704, 0.51412587707621682, 0.42118729370500424, 0.72545884167324226, 0.67204622584239537, 0.61530028194752606, 0.78653111970915501, 0.23039890361286069, 0.30541287806917528, 0.38184565970828621, 0.044828356165918376, 0, 0.866242569793366, 0.20644561824981583, 0.088893729180908515, 0.47149578281194005, 0.17045292879265833, 0.13273528062150053, 0.95038246471478727, 0.27163889064416824, 0.35380278120371084, 0.3899227954340761, 0.56760441217324364, 0.52530689438969869, 0.43602572912523008, 0.74694611141910205, 0.68305351017703231, 0.63232492122065476, 0.80503369813058623, 0.2495056427124418, 0.31299135933636651, 0.047046303087238478, 0, 0.880308518624348, 0.21305517273393954, 0.094016469827638699, 0.48204410356309985, 0.17638779856472273, 0.1382927754736484, 0.96645581537468128, 0.29371196407586475, 0.3972035564354337, 0.34793491682057059, 0.38380356815234651, 0.43380414718758237, 0.98181659228089979, 0.58543102894619214, 0.53591806250097984, 0.49313567574926898, 0.81488114423184566, 0.70050792136986439, 0.75703335930766091, 0.63617555961631933, 0.25664624170672762, 0.34612509267731334, 0.05072594515575498, 0, 0.90011171741958163, 0.22073087744017009, 0.098725304305457257, 0.18308843044742554, 0.14581879515962151, 0.30120135787681296, 0.43056786522238333, 0.39354526427793152, 0.91445557037332914, 0.99656270433374394, 0.19207640083143945, 0.5819867813178099, 0.53744379118470376, 0.49060515603916105, 0.83727651230499245, 0.7067662519008775, 0.6624174146045464, 0.76665905792135203, 0.61968386754412064, 0.27435363115897055, 0.31066477382678032, 0.35579323202371782, 0.05792475434172193, 0, 0.22807851618415878, 0.11147641725377534, 0.16120743192200235, 0.44117095294960618, 0.40235816159738191, 0.92874283441629435, 0.85173531221034626, 1.0098080494259765, 0.23784599039556703, 0.21127458167879101, 0.74585165421649702, 0.60213055125838122, 0.54968577194093404, 0.51104664557801049, 0.45983974911521075, 0.78568053875105726, 0.72660191109606664, 0.66383751912704358, 0.31950820246028783, 0.28414136862816119, 0.36598195931193056, 0.41359907779509286, 0.062413736960545814, 0, 0.11635901735782923, 0.16948341064567726, 0.85913960883946439, 0.94163294612407933, 1.0220697347131895, 0.2621129916159739, 0.2233363654556135, 0.62381384848278487, 0.56210448278596536, 0.51112624580601373, 0.46052129611665743, 0.79574286857996712, 0.67134768683085677, 0.7348208231072173, 0.36350044727991276, 0.31149945697514242, 0.42432797223221247, 0.071355170069852425, 0, 0.13311212753864438, 0.19154786283155434, 0.87644254752636508, 0.95437599984065657, 1.0333535974799875, 0.27337352236547907, 0.24713764184553774, 0.61999338686220373, 0.56554334623620317, 0.51891981964618017, 0.4601730144663716, 0.80623154327557156, 0.68584122790027202, 0.74895702285691124, 0.41028821291079731, 0.35982586797581267, 0.32151885484589787, 0.078930537586414287, 0, 0.14289919667696979, 0.20584315639393247, 0.8896537572863622, 0.96734444756927673, 1.0439263005627437, 0.30057541911024283, 0.26317563614555556, 0.60203787718470592, 0.65732490385981479, 0.78708629113314688, 0.57058651639705615, 0.47410399384294949, 0.52644694474013465, 0.82645643546553338, 0.69542735798640765, 0.37183160672034193, 0.42252192010706796, 0.35411372501268196, 0.096034499392938372, 0, 0.16636913922393265, 0.23086444295024611, 0.89499239907900685, 0.97540425507630801, 1.0534223655854116, 0.31501263949072722, 0.29215885085395205, 0.63983383108040792, 0.7546618179043364, 0.53073198714353087, 0.58605254171904109, 0.46109206506722089, 0.83013320326222495, 0.70802357800234605, 0.42417691069872498, 0.36832637949864688, 0.11205136654648998, 0, 0.18513378939594993, 0.24757965692662395, 0.9087653811203853, 0.98231746203456816, 1.0619284543976957, 0.34302626442658535, 0.30904456303514255, 0.6510770607534303, 0.78137304933024299, 0.52030359415156724, 0.47627774769715026, 0.59474413395206582, 0.84471947918348433, 0.72298944368431173, 0.42607052988679295, 0.37128423774956282, 0.42715697038011124, 0.13582011954508449, 0, 0.21345756982504208, 0.28366699872106121, 0.91411395483088287, 0.98678173929835977, 1.0695865824040671, 0.34838340999080969, 0.64647958260340732, 0.7828144681050615, 0.5376846078129176, 0.48184150504608342, 0.58700098196731254, 0.85916871176492349, 0.72202643473199735, 0.41005497221861936, 0.15775207825464982, 0, 0.23604282168690074, 0.3099968114664583, 0.91431931891638107, 0.99726136765299978, 1.0762623143306755, 0.37457034313516574, 0.66147126747491947, 0.78494132063735167, 0.43205506635483998, 0.55153943324727517, 0.49336392666945533, 0.601959497643346, 0.84436073677843537, 0.7196523880785064, 0.19414855322334568, 0, 0.27381382964213125, 0.34999763029424652, 0.91785139827054596, 1.0028963308202552, 1.0822760326763876, 0.41761104694125545, 0.65717351648817179, 0.78066209228397854, 0.47997135184570183, 1.0065637182126699, 0.53924031128919214, 0.6029945525384165, 0.84582455360174524, 0.7026368245069502, 0.77308820994642669, 0.24531504077003599, 0, 0.32164763129214208, 0.3945025739257953, 0.92919325509652573, 1.0873115223234646, 0.46467946648737796, 1.0093905074384624, 0.93112555317780921, 0.62872149396036248, 0.55709105738789055, 0.85596529160558721, 0.70918366591608006, 0.78163355551583147, 0.32816822954238944, 0, 0.39080401533866416, 0.47650265529899832, 1.0915210458503923, 0.93052087458044852, 1.011317706490906, 0.63096958267854053, 0.5488662864001882, 0.8242767761484191, 0.74101215461711933, 0.43540064203902806, 0, 0.45589217924775355, 1.0948069363612445, 0.93025797457031456, 1.0104810197096261, 0.62160152042762062, 0.70028704479996162, 0.84859139455965205, 0.51702863399042831, 0.76970413755213385, 0.5190749163819941, 0, 1.096815868846732, 0.92480938741923602, 1.0106088739422623, 0.68029764303813522, 0.59718300407762326, 0.81063259916781827, 0.91705219529268422, 0.58311857250091514, 0.55387159781730266, 0.70768920649932654, 0, 1.0980940169546793, 0.83296777262440969, 0.99381666481108666, 0.73717930067634907, 0.90955569650380419, 0.60245925785125976, 0.64906285714553025, 0, 1.0977924536050923, 0.80493566549355144, 1.0023274533478448, 0.70928734228449541, 0.92389909880271848, 0.83877555288482419, 0.6094089686602886, 0, 1.0968661940347333, 0.78028505069948262, 0.98908295668156365, 0.69360091035480032, 0.87224933455806541, 0.51809267279542237, 0, 1.0947850153602166, 0.80352981090682185, 0.98767803496300033, 0.90573231752454886, 0.42912297641877001, 0, 1.0819914512416067, 0.77698557281262426, 0.97985451788083933, 0.87476883668847261, 0, 0.36624107697036523, 1.0822502542988826, 0.83973738287237132, 0.97853258708363922, 0.30446825214871215, 0, 0.73527184751817132, 1.0800978153105858, 0.99438754051384992, 0.17376488868571613, 0.59162430410338007, 0, 0, 0.95920441832573045, 1.094396439073396, 0.22082125089979274, 0.46026570369854547, 0.85008182332290672, 0.12871840727720868, 0.089130770114189156, 1.1058100169243166, 0.45317175382716879, 0.26093059024661669, 0.76225974975862187, 0.17362177783413449, 1.0169956632578132, 0.53133363009349244, 0.69321950511812203, 0.29451801127899452, 0.91993011801154656, 0.54921092945989014, 0.81223825814835049
    });

    for (std::size_t i = 0; i < expected.size(); ++i) { EXPECT_TRUE(std::abs(pde_.solution()(i)-expected[i]) < 1e-6); }
}

// _______________ convergence tests _______________

TEST(transport_test, convergence_test_0) {
    constexpr std::size_t femOrder = 1;

    int num_refinements = 4;
    DMatrix<int> N(num_refinements, 1);   // number of refinements
    N << 16, 32, 64, 128;
    DMatrix<double> order(num_refinements - 1, 1);
    DVector<double> error_L2(num_refinements);
    error_L2.setZero();

    // define PDE parameters
    VectorField<2> b_callable;
    b_callable[0] = [](SVector<2> x) -> double { return std::pow(x[1], 2) + 1; };   // y^2 + 1
    b_callable[1] = [](SVector<2> x) -> double { return 2 * x[0]; };                // 2*x

    double nu = 1e-9;
    double c = 1.;

    constexpr double pi = 3.14159265358979323846;
    auto solutionExpr = [&pi](SVector<2> x) -> double {
        return std::sin(2 * pi * x[0]) * std::sin(2 * pi * x[1]);
    };
    auto forcingExpr = [&pi, &b_callable, &nu, &c](SVector<2> x) -> double {
        return 2*pi*b_callable[0](x)*std::sin(2*pi*x[1])*std::cos(2*pi*x[0])
            + 2*pi*b_callable[1](x)*std::sin(2*pi*x[0])*std::cos(2*pi*x[1])
            + c*std::sin(2*pi*x[0])*std::sin(2*pi*x[1]) + 8*pi*pi*nu*std::sin(2*pi*x[0])*sin(2*pi*x[1]);
    };
    ScalarField<2> forcing(forcingExpr);

    for (int n = 0; n < num_refinements; ++n) {
        std::string domain_name = "unit_square_" + std::to_string(N(n));
        MeshLoader<Mesh2D> domain(domain_name);
        // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
        DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);

        // dicretize b_callable -> discretized_vector_field
        Integrator<FEM, 2, femOrder> integrator;
        DMatrix<double> quad_nodes = integrator.quadrature_nodes(domain.mesh);
        DMatrix<double, Eigen::RowMajor> b_data(quad_nodes.rows(), 2);
        for(int i = 0; i < quad_nodes.rows(); i++) {
            b_data.row(i) = b_callable(SVector<2>(quad_nodes.row(i)));
        }

        // construct discretized transport field together with its divergence
        ScalarField<2> div_b_callable = div(b_callable);
        DVector<double> div_b_data(quad_nodes.rows());
        for(int i = 0; i < quad_nodes.rows(); i++) {
            div_b_data(i) = div_b_callable(SVector<2>(quad_nodes.row(i)));
        }

        DiscretizedVectorField<2,2> b_discretized(b_data, div_b_data);

        PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)>::destroyInstance();
        PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)> &PDEparams =
                PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)>::getInstance(nu, b_discretized, c);

        // define differential operator
        auto L = -nu*laplacian<FEM>() + advection<FEM>(b_discretized) + reaction<FEM>(c);

        // PDE<decltype(unit_square.mesh), decltype(L), DMatrix<double>, FEM, fem_order<1>> pde_(unit_square.mesh, times);
        PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b_discretized), decltype(c)> pde_( domain.mesh, L, boundary_matrix); //, forcing );
        pde_.set_forcing(forcing);

        // compute boundary condition and exact solution
        DMatrix<double> nodes_ = pde_.dof_coords();
        DMatrix<double> dirichletBC(nodes_.rows(), 1);

        DMatrix<double> solution_ex(nodes_.rows(), 1);

        // set dirichlet conditions
        for (int i = 0; i < nodes_.rows(); ++i) {
            solution_ex(i) = solutionExpr(nodes_.row(i));
            dirichletBC(i) = solutionExpr(nodes_.row(i));
        }
        pde_.set_dirichlet_bc(dirichletBC);
        pde_.set_stab_param(2.);

        // init solver and solve differential problem
        pde_.init();
        pde_.solve();

        // check computed error
        DMatrix<double> error_ = solution_ex - pde_.solution();
        error_L2(n) = (pde_.mass() * error_.cwiseProduct(error_)).sum();

        // std::cout << "error_L2 = " << std::setprecision(17) << error_L2(n) << std::endl;
        // //storing solution
        // std::ofstream file("fdaPDE_SUPG_sol.txt");
        // if (file.is_open()){
        //     for(int i = 0; i < pde_.solution().rows(); ++i)
        //         file << pde_.solution()(i) << '\n';
        //     file.close();
        // } else {
        //     std::cerr << "transport test unable to save solution" << std::endl;
        // }
    } // end refinement loop

    for (int nn = 1; nn < num_refinements; ++nn) {
        order(nn - 1) = std::log2(error_L2(nn - 1) / error_L2(nn));
        EXPECT_TRUE(floor(order(nn - 1)) >= 1);
    }
}

TEST(transport_test, convergence_test_1) {
    constexpr std::size_t femOrder = 1;
    double stabParam = 4.705;
    int num_refinements = 4;
    DMatrix<int> N(num_refinements, 1);   // number of refinements
    N << 16, 32, 64, 128;
    DMatrix<double> order(num_refinements - 1, 1);
    DVector<double> error_L2(num_refinements);
    error_L2.setZero();

    // define PDE parameters
    VectorField<2> b_callable;
    b_callable[0] = [](SVector<2> x) -> double { return std::pow(x[1], 2) + 1; };   // y^2 + 1
    b_callable[1] = [](SVector<2> x) -> double { return 2 * x[0]; };                // 2*x

    double nu = 1e-9;
    double c = 1.;

    // define exact solution and forcing
    double BL = 0.1;   // parameter for boundary layer thickness
    auto solutionExpr = [&nu, &BL](SVector<2> x) -> double {
        return x[0]*x[1]*x[1] - x[1]*x[1]*exp((2*(x[0] - 1))/BL) - x[0]*exp(3*(x[1] - 1)/BL) + exp((2*(x[0] - 1) + 3*(x[1] - 1))/BL);
    };
    auto forcingExpr = [&nu, &BL, &b_callable, &c](SVector<2> x) -> double {
        return (BL*BL*c*(x[0]*x[1]*x[1] - x[0]*exp(3*(x[1] - 1)/BL) - x[1]*x[1]*exp(2*(x[0] - 1)/BL) + exp((2*x[0] + 3*x[1] - 5)/BL))
            + BL*(b_callable[0](x)*(BL*(x[1]*x[1] - exp(3*(x[1] - 1)/BL)) - 2*x[1]*x[1]*exp(2*(x[0] - 1)/BL) + 2*exp((2*x[0] + 3*x[1] - 5)/BL))
            + b_callable[1](x)*(2*BL*x[1]*(x[0] - exp(2*(x[0] - 1)/BL)) - 3*x[0]*exp(3*(x[1] - 1)/BL) + 3*exp((2*x[0] + 3*x[1] - 5)/BL)))
            + nu*(2*BL*BL*(-x[0] + exp(2*(x[0] - 1)/BL)) + 9*x[0]*exp(3*(x[1] - 1)/BL) + 4*x[1]*x[1]*exp(2*(x[0] - 1)/BL)
            - 13*exp((2*x[0] + 3*x[1] - 5)/BL)))/(BL*BL);
    };
    ScalarField<2> forcing(forcingExpr);

    for (int n = 0; n < num_refinements; ++n) {
        std::string domain_name = "unit_square_" + std::to_string(N(n));
        MeshLoader<Mesh2D> domain(domain_name);
        // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
        DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);

        // dicretize b_callable -> discretized_vector_field
        Integrator<FEM, 2, femOrder> integrator;
        DMatrix<double> quad_nodes = integrator.quadrature_nodes(domain.mesh);
        DMatrix<double, Eigen::RowMajor> b_data(quad_nodes.rows(), 2);
        for(int i = 0; i < quad_nodes.rows(); i++) {
            b_data.row(i) = b_callable(SVector<2>(quad_nodes.row(i)));
        }

        // construct discretized transport field together with its divergence
        ScalarField<2> div_b_callable = div(b_callable);
        DVector<double> div_b_data(quad_nodes.rows());
        for(int i = 0; i < quad_nodes.rows(); i++) {
            div_b_data(i) = div_b_callable(SVector<2>(quad_nodes.row(i)));
        }

        DiscretizedVectorField<2,2> b_discretized(b_data, div_b_data);

        PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)>::destroyInstance();
        PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)> &PDEparams =
                PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)>::getInstance(nu, b_discretized, c);

        // define differential operator
        auto L = -nu*laplacian<FEM>() + advection<FEM>(b_discretized) + reaction<FEM>(c);

        // PDE<decltype(unit_square.mesh), decltype(L), DMatrix<double>, FEM, fem_order<1>> pde_(unit_square.mesh, times);
        PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b_discretized), decltype(c)> pde_( domain.mesh, L, boundary_matrix); //, forcing );
        pde_.set_forcing(forcing);  

        // compute boundary condition and exact solution
        DMatrix<double> nodes_ = pde_.dof_coords();
        DMatrix<double> dirichletBC(nodes_.rows(), 1);

        DMatrix<double> solution_ex(nodes_.rows(), 1);

        // set dirichlet conditions
        for (int i = 0; i < nodes_.rows(); ++i) {
            solution_ex(i) = solutionExpr(nodes_.row(i));
            dirichletBC(i) = solutionExpr(nodes_.row(i));
        }
        pde_.set_dirichlet_bc(dirichletBC);
        pde_.set_stab_param(stabParam);

        // init solver and solve differential problem
        pde_.init();
        pde_.solve();

        // check computed error
        DMatrix<double> error_ = solution_ex - pde_.solution();
        error_L2(n) = (pde_.mass() * error_.cwiseProduct(error_)).sum();

        // //storing solution
        // std::ofstream file("fdaPDE_SUPG_sol.txt");
        // if (file.is_open()){
        //     for(int i = 0; i < pde_.solution().rows(); ++i)
        //         file << pde_.solution()(i) << '\n';
        //     file.close();
        // } else {
        //     std::cerr << "transport test unable to save solution" << std::endl;
        // }
        // }
    } // end refinement loop

    for (int n = 1; n < num_refinements; ++n) {
        order(n - 1) = std::log2(error_L2(n - 1) / error_L2(n));
        EXPECT_TRUE(floor(order(n - 1)) >= 1);
    }
}

/*
TEST(transport_test, convergence_test_2) {
    constexpr std::size_t femOrder = 2;
    double stabParam = 4.705;
    int num_refinements = 3;
    DMatrix<int> N(num_refinements, 1);   // number of refinements
    N << 16, 32, 64;
    DMatrix<double> order(num_refinements - 1, 1);
    DVector<double> error_L2(num_refinements);
    error_L2.setZero();

    // define PDE parameters
    VectorField<2> b_callable;
    b_callable[0] = [](SVector<2> x) -> double { return std::pow(x[1], 2) + 1; };   // y^2 + 1
    b_callable[1] = [](SVector<2> x) -> double { return 2 * x[0]; };                // 2*x

    double nu = 1e-3;
    double c = 1.;

    // define exact solution and forcing
    double BL = 0.1;   // parameter for boundary layer thickness
    auto solutionExpr = [&nu, &BL](SVector<2> x) -> double {
        return x[0]*x[1]*x[1] - x[1]*x[1]*exp((2*(x[0] - 1))/BL) - x[0]*exp(3*(x[1] - 1)/BL) + exp((2*(x[0] - 1) + 3*(x[1] - 1))/BL);
    };
    auto forcingExpr = [&nu, &BL, &b_callable, &c](SVector<2> x) -> double {
        return (BL*BL*c*(x[0]*x[1]*x[1] - x[0]*exp(3*(x[1] - 1)/BL) - x[1]*x[1]*exp(2*(x[0] - 1)/BL) + exp((2*x[0] + 3*x[1] - 5)/BL))
            + BL*(b_callable[0](x)*(BL*(x[1]*x[1] - exp(3*(x[1] - 1)/BL)) - 2*x[1]*x[1]*exp(2*(x[0] - 1)/BL) + 2*exp((2*x[0] + 3*x[1] - 5)/BL))
            + b_callable[1](x)*(2*BL*x[1]*(x[0] - exp(2*(x[0] - 1)/BL)) - 3*x[0]*exp(3*(x[1] - 1)/BL) + 3*exp((2*x[0] + 3*x[1] - 5)/BL)))
            + nu*(2*BL*BL*(-x[0] + exp(2*(x[0] - 1)/BL)) + 9*x[0]*exp(3*(x[1] - 1)/BL) + 4*x[1]*x[1]*exp(2*(x[0] - 1)/BL)
            - 13*exp((2*x[0] + 3*x[1] - 5)/BL)))/(BL*BL);
    };
    ScalarField<2> forcing(forcingExpr);

    for (int n = 0; n < num_refinements; ++n) {
        std::string domain_name = "unit_square_" + std::to_string(N(n));
        MeshLoader<Mesh2D> domain(domain_name);
        // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
        DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);

        // dicretize b_callable -> discretized_vector_field
        Integrator<FEM, 2, femOrder> integrator;
        DMatrix<double> quad_nodes = integrator.quadrature_nodes(domain.mesh);
        DMatrix<double, Eigen::RowMajor> b_data(quad_nodes.rows(), 2);
        for(int i = 0; i < quad_nodes.rows(); i++) {
            b_data.row(i) = b_callable(SVector<2>(quad_nodes.row(i)));
        }

        // construct discretized transport field together with its divergence
        ScalarField<2> div_b_callable = div(b_callable);
        DVector<double> div_b_data(quad_nodes.rows());
        for(int i = 0; i < quad_nodes.rows(); i++) {
            div_b_data(i) = div_b_callable(SVector<2>(quad_nodes.row(i)));
        }

        DiscretizedVectorField<2,2> b_discretized(b_data, div_b_data);

        PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)>::destroyInstance();
        PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)> &PDEparams =
                PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)>::getInstance(nu, b_discretized, c);

        // define differential operator
        auto L = -nu*laplacian<FEM>() + advection<FEM>(b_discretized) + reaction<FEM>(c);

        PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b_discretized), decltype(c)> pde_( domain.mesh, L, boundary_matrix); //, forcing );
        pde_.set_forcing(forcing);

        // compute boundary condition and exact solution
        DMatrix<double> nodes_ = pde_.dof_coords();
        DMatrix<double> dirichletBC(nodes_.rows(), 1);

        DMatrix<double> solution_ex(nodes_.rows(), 1);

        // set dirichlet conditions
        for (int i = 0; i < nodes_.rows(); ++i) {
            solution_ex(i) = solutionExpr(nodes_.row(i));
            dirichletBC(i) = solutionExpr(nodes_.row(i));
        }
        pde_.set_dirichlet_bc(dirichletBC);
        pde_.set_stab_param(stabParam);

        // init solver and solve differential problem
        pde_.init();
        pde_.solve();

        // check computed error
        DMatrix<double> error_ = solution_ex - pde_.solution();
        error_L2(n) = (pde_.mass() * error_.cwiseProduct(error_)).sum();

        // std::cout << "error_L2 = " << std::setprecision(17) << error_L2(n) << std::endl;
        // //storing solution
        // std::ofstream file("fdaPDE_SUPG_sol.txt");
        // if (file.is_open()){
        //     for(int i = 0; i < pde_.solution().rows(); ++i)
        //         file << pde_.solution()(i) << '\n';
        //     file.close();
        // } else {
        //     std::cerr << "transport test unable to save solution" << std::endl;
        // }
    } // end refinement loop

    for (int n = 1; n < num_refinements; ++n) {
        order(n - 1) = std::log2(error_L2(n - 1) / error_L2(n));
        EXPECT_TRUE(floor(order(n - 1)) >= 2);
    }
}
*/