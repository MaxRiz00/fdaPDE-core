// This file is part of fdaPDE, a C++ library for physics-informed
// spatial and functional data analysis.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <gtest/gtest.h>   // testing framework
#include <cstddef>

#include <fdaPDE/utils.h>
#include <fdaPDE/fields.h>
#include <fdaPDE/mesh.h>
#include <fdaPDE/finite_elements.h>
using fdapde::core::Element;
using fdapde::core::Integrator;
using fdapde::core::LagrangianBasis;
using fdapde::core::FEM;
using fdapde::core::MatrixConst;
using fdapde::core::MatrixPtr;
using fdapde::core::ScalarPtr;
using fdapde::core::VectorPtr;

using fdapde::core::PDE;
using fdapde::core::ScalarField;
using fdapde::core::advection;
using fdapde::core::reaction;
using fdapde::core::diffusion;
using fdapde::core::laplacian;
using fdapde::core::dt;
using fdapde::core::fem_order;
using fdapde::core::make_pde;
using fdapde::core::PDEparameters;
using fdapde::core::DiscretizedMatrixField;
using fdapde::core::DiscretizedVectorField;
using fdapde::core::Divergence;

#include "utils/mesh_loader.h"
using fdapde::testing::MeshLoader;
#include "utils/utils.h"
using fdapde::testing::almost_equal;
using fdapde::testing::DOUBLE_TOLERANCE;
using fdapde::testing::read_csv;

// #include <iomanip>
#include <string>
// tests for Advection Dominated Elliptic Partial Differential Equations
TEST(transport_test, TestCase0) {
    constexpr std::size_t femOrder = 1;

    // define exact solution
    auto solutionExpr = [](SVector<2> x) -> double {
        return 3*sin(x[0]) + 2*x[1];
    };

    SVector<2> b;  b << 1., 1.;
    double mu = 1e-9;

    // non-zero forcing term
    auto forcingExpr = [&mu, &b](SVector<2> x) -> double {
        return 2*b[1] + 3*b[0]*cos(x[0]) + 3*mu*sin(x[0]);
    };
    ScalarField<2> forcing(forcingExpr);   // wrap lambda expression in ScalarField object

    PDEparameters<decltype(mu), decltype(b)>::destroyInstance();
    PDEparameters<decltype(mu), decltype(b)> &PDEparams =
            PDEparameters<decltype(mu), decltype(b)>::getInstance(mu, b);

    auto L = - mu * laplacian<FEM>() + advection<FEM>(b);
    MeshLoader<Mesh2D> unit_square("unit_square_32");

    PDE< decltype(unit_square.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(mu),
            decltype(b)> pde_( unit_square.mesh, L); //, forcing);
    pde_.set_forcing(forcing);

    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);
    DMatrix<double> solution_ex(nodes_.rows(), 1);

    // set exact sol & dirichlet conditions
    for (int i = 0; i < nodes_.rows(); ++i) {
        solution_ex(i) = solutionExpr(nodes_.row(i));
        dirichletBC(i) = solutionExpr(nodes_.row(i));
    }
    pde_.set_dirichlet_bc(dirichletBC);
    pde_.set_stab_param(1.0);
    // init solver and solve differential problem
    pde_.init();
    pde_.solve();

    // check computed error
    DMatrix<double> error_ = solution_ex - pde_.solution();
    double error_L2 = (pde_.mass() * error_.cwiseProduct(error_)).sum();
    EXPECT_TRUE(error_L2 < 1e-7);

    // std::cout << "error_L2 = " << std::setprecision(17) << error_L2 << std::endl;
    // //storing solution
    // std::ofstream file("fdaPDE_SUPG_sol.txt");
    // if (file.is_open()){
    //     for(int i = 0; i < pde_.solution().rows(); ++i)
    //         file << pde_.solution()(i) << '\n';
    //     file.close();
    // } else {
    //     std::cerr << "transport test unable to save solution" << std::endl;
    // }
}

TEST(transport_test, TestCase1) {

    constexpr std::size_t femOrder = 1;

    // define exact solution
    SVector<2> b;
    b << 1., 0.;
    double nu = 1e-9;
    // double c = 0.;

    auto solutionExpr = [&nu](SVector<2> x) -> double {
        return x[0]*x[1]*x[1] - x[1]*x[1]*exp((2*(x[0] - 1))/nu) - x[0]*exp(3*(x[1] - 1)/nu) + exp((2*(x[0] - 1) + 3*(x[1] - 1))/nu);
    };

    // forcing term
    using std::exp;
    auto forcingExpr = [&nu, &b](SVector<2> x) -> double {
        return b[0]*(x[1]*x[1] - exp((3*x[1] - 3)/nu) - 2*x[1]*x[1]*exp((2*x[0] - 2)/nu)/nu + 2*exp((2*x[0] + 3*x[1] - 5)/nu)/nu) + b[1]*(2*x[0]*x[1] - 2*x[1]*exp((2*x[0] - 2)/nu) - 3*x[0]*exp((3*x[1] - 3)/nu)/nu + 3*exp((2*x[0] + 3*x[1] - 5)/nu)/nu) - nu*(2*x[0] - 2*exp((2*x[0] - 2)/nu) - 9*x[0]*exp((3*x[1] - 3)/nu)/(nu*nu) - 4*x[1]*x[1]*exp((2*x[0] - 2)/nu)/(nu*nu) + 13*exp((2*x[0] + 3*x[1] - 5)/nu)/(nu*nu));
    };
    ScalarField<2> forcing(forcingExpr);

    PDEparameters<decltype(nu), decltype(b)>::destroyInstance();
    PDEparameters<decltype(nu), decltype(b)> &PDEparams =
            PDEparameters<decltype(nu), decltype(b)>::getInstance(nu, b);

    auto L = - nu * laplacian<FEM>() + advection<FEM>(b); // + reaction<FEM>(c);

    MeshLoader<Mesh2D> unit_square("unit_square_32");

    PDE< decltype(unit_square.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b)> pde_( unit_square.mesh, L); //, forcing);
    pde_.set_forcing(forcing);

    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);
    DMatrix<double> solution_ex(nodes_.rows(), 1);

    // set exact sol & dirichlet conditions
    for (int i = 0; i < nodes_.rows(); ++i) {
        solution_ex(i) = solutionExpr(nodes_.row(i));
        dirichletBC(i) = solutionExpr(nodes_.row(i));
    }
    pde_.set_dirichlet_bc(dirichletBC);
    pde_.set_stab_param(1.075);

    // init solver and solve differential problem
    pde_.init();
    pde_.solve();

    // check computed error
    DMatrix<double> error_ = solution_ex - pde_.solution();
    double error_L2 = (pde_.mass() * error_.cwiseProduct(error_)).sum();
    EXPECT_TRUE(error_L2 < 1e-3);

    // std::cout << "error_L2 = " << std::setprecision(17) << error_L2 << std::endl;
    // //storing solution
    // std::ofstream file("fdaPDE_SUPG_sol.txt");
    // if (file.is_open()){
    //     for(int i = 0; i < pde_.solution().rows(); ++i)
    //         file << pde_.solution()(i) << '\n';
    //     file.close();
    // } else {
    //     std::cerr << "transport test unable to save solution" << std::endl;
    // }

}

TEST(transport_test, TestCase2){
    constexpr std::size_t femOrder = 1;

    // define domain
    MeshLoader<Mesh2D> domain("unit_square_32");

    // define vector field containing transport data
    VectorField<2> b_callable;
    b_callable[0] = [](SVector<2> x) -> double { return std::pow(x[1], 2) + 1; };   // y^2 + 1
    b_callable[1] = [](SVector<2> x) -> double { return 2 * x[0]; };                // 2*x

    Integrator<FEM, 2, femOrder> integrator;
    DMatrix<double> quad_nodes = integrator.quadrature_nodes(domain.mesh);

    DMatrix<double, Eigen::RowMajor> b_data(quad_nodes.rows(), 2);
    for(int i = 0; i < quad_nodes.rows(); i++) {
        b_data.row(i) = b_callable(SVector<2>(quad_nodes.row(i)));
    }

    // construct it together with its divergence
    ScalarField<2> div_b_callable = div(b_callable);
    DVector<double> div_b_data(quad_nodes.rows());
    for(int i = 0; i < quad_nodes.rows(); i++) {
        div_b_data(i) = div_b_callable(SVector<2>(quad_nodes.row(i)));
    }

    DiscretizedVectorField<2,2> b_discretized(b_data, div_b_data);

    // coefficients
    double mu = 1e-9;

    // non-zero forcing term
    auto forcingExpr = [](SVector<2> x) -> double { return 1.; };
    ScalarField<2> forcing(forcingExpr);   // wrap lambda expression in ScalarField object

    PDEparameters<decltype(mu), decltype(b_discretized)> &PDEparams =
            PDEparameters<decltype(mu), decltype(b_discretized)>::getInstance(mu, b_discretized);

    // define differential operator
    auto L = -mu*laplacian<FEM>() + advection<FEM>(b_discretized);

    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(mu),
            decltype(b_discretized)> pde_( domain.mesh, L); //, forcing );
    pde_.set_forcing(forcing);

    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);

    // set dirichlet conditions
    for (int i = 0; i < nodes_.rows(); ++i) {
        dirichletBC(i) = 0.;
    }
    pde_.set_dirichlet_bc(dirichletBC);
    pde_.set_stab_param(2.285);

    // init solver and solve differential problem
    pde_.init();
    pde_.solve();

    // //storing solution
    // {
    // std::ofstream file("fdaPDE_SUPG_sol.txt");
    // if (file.is_open()){
    //     for(int i = 0; i < pde_.solution().rows(); ++i)
    //         file << std::setprecision(17) << pde_.solution()(i) << '\n';
    //     file.close();
    // } else {
    //     std::cerr << "transport test unable to save solution" << std::endl;
    // }
    // }

    std::vector<double> expected({
        -0.00022823664129567272, 4.1417718980517727e-05, 6.3017955812847757e-05, 7.4327869816103511e-05, 7.1713628735370011e-05, 5.2818633207922898e-05, 2.2700840493532939e-05, -6.2987816153319849e-06, -2.1477747471758261e-05, -1.9371923351338519e-05, -8.6577088778101049e-06, -1.3438388124072642e-06, -5.9188482495849307e-07, -1.1054579815573873e-06, -7.3544941728605392e-07, -4.5830301787342841e-07, -2.9477166968934962e-07, -1.7968086707229249e-07, -9.760765612406958e-08, -3.8958361208570729e-08, 3.2833200544033093e-09, 3.3735381308180818e-08, 5.5639744653079997e-08, 7.1514425100560341e-08, 8.2501930436621891e-08, 8.307086263914117e-08, 7.7581661517515691e-08, 1.8686399710464328e-07, -2.7542179191449446e-07, -1.432494020619024e-05, -0.00012209406155649542, -0.00056062144401612223, -0.00022882713136945155, 0.00011244709531143568, 0.038789817678092621, 0.074360448929288642, 0.10259466279781476, 0.1197180128760249, 0.12367277654139416, 0.11533410426978805, 0.098787045220128253, 0.080025063612662276, 0.064369621147453565, 0.054114712834954851, 0.048187857063193326, 0.044133562283932413, 0.040507430163876222, 0.037291125698340019, 0.034594376314245841, 0.032280960693540868, 0.03026456289233782, 0.028491370228410463, 0.026919070937911564, 0.025514683724053015, 0.024252223963286565, 0.023110867502440569, 0.022073733303981741, 0.021126986928550022, 0.020259132364464014, 0.019460322579826512, 0.018722837622333895, 0.01804412847601413, 0.017386246363431081, 0.016282637839666696, 0.012311868780375138, 0.00027602934303880175, -2.337123623526255e-05, 0.029563979136746896, 0.060805269905212976, 0.09500100442442537, 0.13146295115248816, 0.16615071132950643, 0.19182876325347611, 0.20085019824371983, 0.18991491481412712, 0.16363670683480422, 0.13306170040316692, 0.1087910131396001, 0.094203894855622181, 0.085546263192917638, 0.078489218855891787, 0.072218258864696516, 0.06696329417901016, 0.062482609487207824, 0.058594494048926332, 0.055184825916578438, 0.052167180311199622, 0.049475138095867448, 0.047056998946502046, 0.044871717684529883, 0.042886287211328755, 0.041073816779648512, 0.039411730783931495, 0.037880671782309208, 0.036471280841253353, 0.035160201088413563, 0.033345905597445331, 0.026697523054349616, 0.00045900953712015236, 4.1078763875720192e-06, 0.031248210479260349, 0.06194965666685387, 0.092019403569250632, 0.12246894675760198, 0.15526188033420155, 0.19137780440796789, 0.22749752209883073, 0.25422114130304141, 0.2597383576980084, 0.23898303544938113, 0.20073745679500762, 0.1629889985370338, 0.13812938122019988, 0.12423842125068751, 0.11385050689212092, 0.1047294576387134, 0.097106999320518458, 0.090633672044203833, 0.085035324461540274, 0.080135723147626223, 0.075804874747879836, 0.071944062151433161, 0.068477199224640461, 0.065344339866704709, 0.062497609833893408, 0.059897870293968147, 0.05751105000059864, 0.055312769128003404, 0.053290329450219588, 0.050852197572949044, 0.042169810764081356, 0.00067069387176405145, -3.7091307260411576e-07, 0.030745303862670718, 0.061668760787877183, 0.092719418233312978, 0.12349191184539798, 0.15364618887102111, 0.18396787052520377, 0.21679470022073874, 0.25356908818554358, 0.28944982698383653, 0.31057382188818083, 0.30186544204606458, 0.26309157757706902, 0.2146696536168245, 0.17946934780125276, 0.16016999883235983, 0.14657429839649749, 0.13483305693628245, 0.12506710100002277, 0.1167945195703663, 0.10965682718398082, 0.10341779506421715, 0.097906566895768765, 0.092994576001771551, 0.088583493114921086, 0.084596347888771989, 0.080971809129807504, 0.077657765549134297, 0.074608853918456494, 0.071801204006736133, 0.068697256243899552, 0.058368197227515108, 0.00091171382363162805, 8.5550133976152533e-08, 0.030511786747073166, 0.061028259273902589, 0.091631119903552535, 0.12246547037313241, 0.15350828488228063, 0.18430825183145444, 0.2144569272021298, 0.24509635488236542, 0.27931061565475584, 0.31750946561903998, 0.34917222308413065, 0.35337923082813155, 0.31840138063874829, 0.26218576635010238, 0.21759434979141112, 0.1932724390920196, 0.17668948158777797, 0.16258668375982469, 0.15092004563742745, 0.14105065176125367, 0.13254704454056648, 0.12511800875081111, 0.11855620930995948, 0.11270661925450168, 0.10745138091313045, 0.10269864860602053, 0.098373233950843686, 0.09440514332688249, 0.090736656298247689, 0.08685621925698718, 0.07502204611399807, 0.0011785396097429622, 9.5026044548118905e-08, 0.030196615059060742, 0.060438362934077464, 0.090748757403774222, 0.12114738700200353, 0.15172510825632218, 0.18263771259090444, 0.21378975310569623, 0.24454421815229185, 0.27468592007171433, 0.30658126899436933, 0.34379765558782627, 0.38117519050726201, 0.39640738859600394, 0.366746408629816, 0.30463008821603094, 0.25205564046311357, 0.22351922327586532, 0.20426485927948279, 0.18808735832598411, 0.17476956611455494, 0.16350623536189721, 0.15380676603847709, 0.14533198225200292, 0.13784352388259355, 0.13116385001183178, 0.12515857613754963, 0.11972135664321799, 0.11475384539063034, 0.11014799502947112, 0.10535237266797445, 0.091949818979982612, 0.001469103591224014, 6.5305605241929827e-08, 0.029829641813963581, 0.059705263759559146, 0.089675914235914089, 0.11978346148772236, 0.15004467335211763, 0.18048126223450814, 0.21121796846648372, 0.24240255147806183, 0.27369223805824155, 0.30423308035528979, 0.33491697392960623, 0.37022938311029008, 0.41006362458161238, 0.43374215415813999, 0.40895718743586595, 0.34167869217087532, 0.28268954796623824, 0.25096496217067887, 0.229408748923142, 0.21146231987207026, 0.19673881096542456, 0.18427781687793704, 0.1735444884566138, 0.16415996044424624, 0.15586074363487984, 0.14845087825033931, 0.1417807285212781, 0.13571700692007962, 0.13009057364296336, 0.12423317249886975, 0.10904447871344031, 0.0017830426225540134, 6.376845874419919e-08, 0.029418910893854816, 0.058888347483992097, 0.08845750371831182, 0.11817559260532289, 0.14809222634569696, 0.17824102627109395, 0.2086233470457092, 0.23928069586965714, 0.2704012247867329, 0.30198729493849813, 0.33317634220499431, 0.36358220809724151, 0.39716471108428475, 0.43765933407093882, 0.4674881424532939, 0.44592958768234225, 0.37335812578922689, 0.3095990253022593, 0.27574416101071431, 0.25226490368859805, 0.2328598561422254, 0.21696291636343751, 0.20348864839642389, 0.19187206265315429, 0.18170336891940078, 0.17269960125449479, 0.16464849803094986, 0.15737037596391387, 0.15062553626284278, 0.14355574294910139, 0.12625378760842301, 0.002121581371444661, 5.6585854299821414e-08, 0.028966406329197184, 0.057987328023440594, 0.087116581866038156, 0.11640568788678356, 0.14590348716584259, 0.17565922070705189, 0.20571831719350142, 0.23609338142327765, 0.26677272792355661, 0.29787423983980038, 0.32960309026001916, 0.36139551155598254, 0.39208563580524397, 0.42443892588984472, 0.46481051430375409, 0.49903961750024101, 0.47830582700385393, 0.39989530528347011, 0.33308683831387237, 0.29804770571791089, 0.2730042035397181, 0.25244027666264307, 0.23558248038352655, 0.22126387230128824, 0.20890100752755528, 0.19806146148536621, 0.18844560668985472, 0.17980759882117034, 0.17182406767080863, 0.16338098813967544, 0.14356192236245119, 0.0024872670318985424, 5.0397326410349184e-08, 0.028476827165109901, 0.057011228537418933, 0.085660248846609083, 0.11447966035331564, 0.14352288294430757, 0.17283927198970597, 0.202475413302903, 0.2324789725874728, 0.26287972754188932, 0.2936534433412693, 0.32482702806398428, 0.35665644209069397, 0.38893510438235951, 0.42018714785829281, 0.4517855955891687, 0.49188921375031602, 0.52920930326719517, 0.506394760079239, 0.42165885469611325, 0.35357692628374909, 0.31809489371410782, 0.29181435789774213, 0.27036773757185023, 0.25273817351765371, 0.23772649560790904, 0.22473870477335434, 0.21332406595624148, 0.20314528502302756, 0.19377255579606403, 0.18377396287353367, 0.16097599460231354, 0.0028836779764449772, 4.483907171240319e-08, 0.027954566941822266, 0.05596911138067568, 0.084103185807732156, 0.11241531582104808, 0.14096250939057495, 0.16979946338942137, 0.19897664426416267, 0.22853891978018304, 0.25853061037011932, 0.28899187151485373, 0.31991019724334652, 0.35124499963750117, 0.38320539617329935, 0.41587276991835798, 0.44780417831108316, 0.47897099821071221, 0.51908428490945191, 0.55834076339312122, 0.53023120606509011, 0.43914873478273286, 0.37153940582106482, 0.33611124168854323, 0.30888966904278525, 0.28680352990310282, 0.26856630950188576, 0.25299296609303118, 0.23947893240844156, 0.22752965366996705, 0.2165783040689398, 0.20480798591571572, 0.17851853336567494, 0.0033151928799057613, 3.9710706360460055e-08, 0.027404064195670912, 0.054869822419384498, 0.082458672876529152, 0.11023130954994603, 0.13824729237765368, 0.16656447765466997, 0.19523836561330107, 0.22432054580596822, 0.25385569595473034, 0.28388362982081466, 0.31444619378285987, 0.34554966886454941, 0.37711892278777959, 0.4092741997796337, 0.44227623493324036, 0.47492935626204313, 0.50582579459573473, 0.546542085107941, 0.58637543343267551, 0.54971029192403953, 0.45298901712081491, 0.38742786252019362, 0.35231521741580529, 0.32442199560189011, 0.30190076191937609, 0.28319362418626365, 0.2671606627586699, 0.2531474529177421, 0.24037612451219365, 0.22657075116925562, 0.19622527022478953, 0.0037868673748283218, 3.5072110943301835e-08, 0.026829728596316306, 0.053722223554371111, 0.080740066168031227, 0.10794542769878426, 0.1353998079121897, 0.1631635842264656, 0.19129536610294001, 0.21985127141763366, 0.24888376349568483, 0.27843830667685926, 0.30855142880467151, 0.33926070627408983, 0.37058806299820413, 0.40245016469538791, 0.43487185880101703, 0.46819922758762572, 0.50157321035669233, 0.53225919628116714, 0.57439664326676432, 0.61290455759773133, 0.56474796005459937, 0.46389707613108327, 0.40163529364759104, 0.36691246253534704, 0.33859294157688213, 0.31579799572071032, 0.29672069157143899, 0.28023687119701929, 0.26533835757551899, 0.24917155893936471, 0.21414687817630901, 0.0043044309542718843, 3.0903890034639136e-08, 0.02623585369783726, 0.052534952102149375, 0.078960452653021443, 0.10557535844876591, 0.13244239470192337, 0.15962373677847483, 0.18718055715591339, 0.2151723038337385, 0.24365578368540658, 0.27268413712616246, 0.30230392950977308, 0.33255023497188874, 0.36345365143329189, 0.39504503701394145, 0.42724872045655865, 0.46000141269142508, 0.49368885256315065, 0.52772775677848005, 0.55828062357837738, 0.60272031166863216, 0.63724706935403042, 0.57542309668609781, 0.4726250860865393, 0.41447176832356486, 0.38009355080759133, 0.35156414139933206, 0.32859742523788649, 0.30912922082903205, 0.2916844178700333, 0.27275125581240195, 0.23235325015245625, 0.004874400013947104, 2.718980231485421e-08, 0.025626563747128243, 0.051316311948873816, 0.077132425960934545, 0.10313815418450711, 0.12939680840323059, 0.15597163257673255, 0.18292552834280526, 0.21032057861363593, 0.23821725911070213, 0.26667330004604933, 0.29574251074104818, 0.32547246338865254, 0.35589838473719487, 0.38704312473124763, 0.41894090610739393, 0.45152934318265492, 0.48466489774715327, 0.51878965992623027, 0.55335211982160926, 0.58401900926169703, 0.63143081972073123, 0.65857599318011695, 0.58206470447121239, 0.47988662392629911, 0.42616129147738668, 0.39202759018426014, 0.36344669005422064, 0.34024464307524521, 0.31971741334749743, 0.29749118125415375, 0.25094061527867234, 0.0055042793930896467, 2.3911626605731987e-08, 0.025005766698254876, 0.050074179339119951, 0.075267951035795366, 0.10065004770320043, 0.12628378723539713, 0.15223283281517938, 0.17856106548143552, 0.20533228911762277, 0.23260971080187795, 0.26045508587326266, 0.28892738119518391, 0.31808126142051141, 0.34796502087998304, 0.37861546265176221, 0.41004660794525177, 0.44229603717633598, 0.47530711087485944, 0.5088684913386351, 0.54353753380328318, 0.57838494878822821, 0.60971553713631765, 0.6602005709505655, 0.6760850922498054, 0.58526458673961601, 0.4862867253227463, 0.43684578114810979, 0.40282456010037904, 0.37414463992857161, 0.34983108275715979, 0.3236438779147302, 0.27003798246542243, 0.0062029340292355482, 2.1052941379511942e-08, 0.024377118619873045, 0.048815928697754668, 0.073378245786755364, 0.098126289553901527, 0.12312286787279618, 0.14843147527923223, 0.17411629525484171, 0.20024206492992258, 0.22687374899440771, 0.25407596097328633, 0.28191203059764297, 0.31044250075859126, 0.33972324386944286, 0.36980278062413108, 0.4007216370356308, 0.43248009715746771, 0.46513157771017621, 0.49859298528686813, 0.53262861589445365, 0.56794466181200853, 0.60278224794855584, 0.63567135555608156, 0.68841354070806726, 0.68916068077385428, 0.58581672883531821, 0.49226356655273967, 0.44655488999563236, 0.41233334733198879, 0.38249771492205348, 0.35155038238703162, 0.28982783576657395, 0.0069808451897386296, 1.8580998207791865e-08, 0.023743997523902233, 0.047548377990339584, 0.071473693040186775, 0.095581017547409039, 0.11993220162637518, 0.14459005494071944, 0.16961845689081109, 0.19508235945537811, 0.22104763768192359, 0.24758072706893239, 0.27474797522710759, 0.30261461350554442, 0.33124309379592737, 0.36069104216041148, 0.3910060822564328, 0.42223735574764937, 0.454356828099021, 0.48747080346761618, 0.52139047741531153, 0.55597591684103143, 0.59198456540410294, 0.62656678953952682, 0.66215208393610503, 0.7151965283662336, 0.69751057130288574, 0.58459427776978701, 0.49800614526375347, 0.45496760213033205, 0.41909050764990707, 0.38158494374179081, 0.31056651441052802, 0.0078510548744959423, 1.6510331344707311e-08, 0.023109490245726196, 0.046277761373035485, 0.069563796130845568, 0.093027190051018588, 0.11672845565470613, 0.14072927459807047, 0.1650926951414626, 0.18988324878692897, 0.21516695015144166, 0.24101113056322751, 0.26748403659859854, 0.2946541063059146, 0.32258882788057164, 0.35135285219256629, 0.38100647115855962, 0.41159366149510884, 0.44318344016424371, 0.47568565870059015, 0.50934065293266717, 0.543694540327049, 0.57895284832144889, 0.6155891497606556, 0.64986589502386516, 0.68927257769993655, 0.7395167762129663, 0.70119654643698992, 0.58233944284869399, 0.50313914542152871, 0.46014658535867453, 0.41489274827798384, 0.3325181846618615, 0.0088313386880794036, 1.4694641443839643e-08, 0.022476376712885868, 0.045009694665464797, 0.067657120890748573, 0.090476498997747345, 0.11352669128441085, 0.13686788203347355, 0.16056184271642865, 0.18467213935581664, 0.20926425407359667, 0.23440558151394184, 0.26016524535154684, 0.28661365774119091, 0.31382171803790476, 0.34185955524039108, 0.37079419161347532, 0.40069026461664148, 0.43158196435358687, 0.46358154712056254, 0.49646898760223018, 0.53077378365379135, 0.56549240607784634, 0.60160308420067399, 0.63866515139342761, 0.67291510596612558, 0.71689148566665162, 0.76028699801279487, 0.70047551616737636, 0.57913927338089477, 0.50520887881755594, 0.45230078770994175, 0.35646729920771558, 0.0099363960829829748, 1.3530788341015642e-08, 0.021847156607275112, 0.043749232793384753, 0.065761387551747361, 0.087939496118530788, 0.11034051788742097, 0.13302283643040366, 0.15604657560817037, 0.17947387743099102, 0.2033691204987535, 0.2277990483663126, 0.25283276426650864, 0.27854153126468134, 0.30499829200816031, 0.33227678723734611, 0.36045021646412756, 0.38958788824074886, 0.4197619009754861, 0.4509845512596779, 0.48345492224612868, 0.51669975680065761, 0.55181259145588557, 0.58676391637476388, 0.62395500240019086, 0.66112669812571134, 0.69601297342591895, 0.74451366585227607, 0.77631491134872432, 0.69512056441312009, 0.57248169518415359, 0.49258797487525052, 0.38325783566875143, 0.011206001562483225, 1.1532582386833055e-08, 0.021223968140106571, 0.042500691549790137, 0.063883176780644299, 0.085425171282528384, 0.10718154519669516, 0.12920865425286229, 0.15156468929040254, 0.17431000305014191, 0.19750739984328952, 0.22122236617416102, 0.24552320942866207, 0.27048105638951758, 0.29616964283415681, 0.3226647971805503, 0.35004347321946339, 0.37838244807580457, 0.4077527653257626, 0.43823940335419276, 0.46981161491351059, 0.5028291592480264, 0.53635675673753724, 0.57251758396619934, 0.60747721776901553, 0.64600260596355552, 0.68292631491300482, 0.71940437960494497, 0.77107408811099787, 0.78560128614684321, 0.68187645103916428, 0.5490618099341068, 0.41176189240639621, 0.012710241186337795, 1.388995671856522e-08, 0.0206088887309498, 0.041268294458016601, 0.062028975973942579, 0.082942427340080296, 0.10406126925491883, 0.12543962715531196, 0.14713350714050324, 0.16920116320136444, 0.19170344429395145, 0.2147041036520862, 0.23827004502415217, 0.26247147004694721, 0.28738187563920731, 0.3130778279132912, 0.33963840642739918, 0.36714412951349984, 0.3956759685800233, 0.42530541908816166, 0.45613881788192062, 0.48806950678700967, 0.521731942837657, 0.5553970457669295, 0.5929828667595114, 0.62757441408679149, 0.66767912510602989, 0.70403885933462951, 0.74297580453290557, 0.79405784570576954, 0.78225936947218366, 0.64461095492029663, 0.44961809381281503, 0.014349672181268576, 1.5738413043790454e-09, 0.020002962672420445, 0.040054087704856765, 0.060201810508186696, 0.080495331013204635, 0.10098499029092844, 0.12172264484006412, 0.14276203860235895, 0.16415917195149013, 0.18597266636051343, 0.20826411971706754, 0.23109843874766209, 0.25454412140498872, 0.2786734443245471, 0.30356248962707227, 0.32929092127996701, 0.35594139091181154, 0.38359828844042299, 0.41234756452187493, 0.44225900037498012, 0.47347200035334031, 0.50575895063909704, 0.54018827422121085, 0.57374272808131122, 0.61336048519883035, 0.64693657638978819, 0.68878640060380603, 0.72425347785705485, 0.76523666262248324, 0.80596738772011844, 0.74476000084963889, 0.51547253912382862, 0.016339825884075183, 4.5540344278641447e-08, 0.019409653698197436, 0.038865279398923931, 0.058413020167927265, 0.078099636897152505, 0.097972929226806962, 0.11808213144150274, 0.13847833233324286, 0.15921491235579163, 0.18034798134210947, 0.20193679398937323, 0.22404412088571116, 0.24673655838430419, 0.27008476409447701, 0.29416359659669411, 0.31905211180923371, 0.34483332594801186, 0.37159360879738018, 0.39942119655220043, 0.42840765155143967, 0.45861775256266912, 0.49023748998303929, 0.52286521324012925, 0.55819941106336013, 0.59125236361974964, 0.63388860604866792, 0.66529238797756496, 0.70873332672216693, 0.74223877203163058, 0.77956877564557203, 0.78114124450787381, 0.59239396048313275, 0.019815778504688648, -1.2583263278914208e-07, 0.01882261292642539, 0.037688421488174653, 0.056641046662117667, 0.075725162501081078, 0.094986706078637961, 0.11447318036346468, 0.13423391723511011, 0.15432031998069637, 0.1747861273306234, 0.19568774723262353, 0.21708468882038623, 0.23904007871991531, 0.26162119986647575, 0.28489995789570288, 0.30895317163745217, 0.33386259222490655, 0.35971456124296197, 0.38659922709154132, 0.41460848313515636, 0.44383998229176125, 0.47434949297209461, 0.50638156268849488, 0.53931108390392268, 0.57566511502478313, 0.60763985449644808, 0.65488697117876848, 0.68193527244869845, 0.72555374691726537, 0.75192566919814918, 0.76061340765186869, 0.62868123294855605, 0.024530254845597767, 5.5307121775868374e-07, 0.018270467511580669, 0.036583232818669445, 0.05498035589844312, 0.073503218024130373, 0.092193511281993573, 0.11109381624148819, 0.13024835500172632, 0.14970386404433708, 0.16951045254638294, 0.18972227791247656, 0.21039790662475011, 0.23160033240930081, 0.25339675540731543, 0.27585831931493798, 0.29905999734789535, 0.32308069606883494, 0.3480034579252827, 0.37391548332185265, 0.40090770323038294, 0.42907230411445579, 0.45851054613344944, 0.48926346222289413, 0.52163784848163408, 0.55475966481962413, 0.592110653596714, 0.62220483235407253, 0.67655756819172164, 0.69475690617841845, 0.73235874769260589, 0.72941714556402348, 0.61671275815332716, 0.027937780235732956, -2.2074091825088617e-06, 0.017649051985079118, 0.035333769839692601, 0.053090809316488657, 0.070962567945077534, 0.088994923543381302, 0.10723675793381632, 0.12573894199752972, 0.14455295086517861, 0.1637295485073062, 0.18331810966041512, 0.20336701451213662, 0.22392516162113626, 0.24504417150639413, 0.26678056221597352, 0.28919724646100248, 0.31236407134697936, 0.33635753185671369, 0.36125997001686438, 0.38715846524716846, 0.41414354727022623, 0.44230538870433705, 0.47174594849780105, 0.50248730473108161, 0.53488813931676249, 0.56785315739143516, 0.60575128760828323, 0.63290338573746197, 0.69798041042723724, 0.69689590929423773, 0.70503835175011664, 0.58796402618686316, 0.029154411955700076, 9.3076399090843148e-06, 0.017366541338797972, 0.034780096861999732, 0.052288286887951785, 0.069919336105588079, 0.087693151473101152, 0.10562445520207631, 0.12372777255638731, 0.14202355710548176, 0.16054392842987669, 0.17933630254055438, 0.19846368759758173, 0.2180014230136543, 0.23803127483098208, 0.25863464062940844, 0.27988688277337842, 0.30185443639374254, 0.32459543986580186, 0.34816344605770172, 0.37261265975224389, 0.39800257461481542, 0.42440047930824459, 0.45187793383883784, 0.48052632053068817, 0.51034644975257826, 0.54172001055033814, 0.57344249561580662, 0.61036082570553141, 0.63320648705139293, 0.71321230106478528, 0.66540380659777376, 0.56133299778086021, 0.029470036490607778, -3.979967180661626e-05, 0.015800200200649119, 0.031604716992297721, 0.047399643254306734, 0.063256246733074492, 0.079280852987028444, 0.095603128690057743, 0.11235945278316151, 0.12967113017489451, 0.14762112031816807, 0.16623602061897366, 0.18548051095143508, 0.20526834699901869, 0.22548802788279598, 0.24603506423619584, 0.26683968392770241, 0.28788092167596097, 0.30918455029248598, 0.33080965388141631, 0.3528326123820818, 0.37533588060627654, 0.39840381984315137, 0.42212331791031416, 0.44658091788007531, 0.47188156545846621, 0.49803619961684936, 0.52541732968483112, 0.5529320336190745, 0.58505469397404308, 0.60185026452867119, 0.69777382182818992, 0.52434973780877303, 0.029860093184912059, 0.00017951952981702131, 0.019667393077901146, 0.039350286235335701, 0.059377418252162341, 0.079693966709068711, 0.10006404284636554, 0.12012733968098745, 0.13948346727432878, 0.15778717270193873, 0.17482936919496497, 0.19057949984750025, 0.20517623540204041, 0.21887230302715999, 0.23195691617897987, 0.24468662465050445, 0.25724814847813071, 0.26975890493089161, 0.28229283514097803, 0.29491087337144434, 0.30768007288448279, 0.32067746863270691, 0.33398487038936636, 0.34768303419959345, 0.36184976291419496, 0.37655714070818114, 0.3918880351215161, 0.40785211832776735, 0.42471028714512504, 0.44173994331956645, 0.46181013065030607, 0.47062073236186719, 0.56507518860392425, 0.029513058975305623, -0.00046485155847948435, -1.9459486236943387e-05, -2.3780140908375265e-05, -2.8331016115804292e-05, -1.2260001339990682e-05, 3.4273050611423095e-05, 0.0001209383423753539, 0.00025607533267306155, 0.00044540095924333888, 0.00069145500220106995, 0.00099411343011875249, 0.0013520408850491439, 0.0017644905898077405, 0.0022326637607857809, 0.0027600714942896047, 0.0033518975082259361, 0.004013901576432998, 0.0047515789428003996, 0.0055700018509254505, 0.0064742568673955714, 0.0074700454006628048, 0.0085640526194354725, 0.0097639954449700167, 0.011078518313231086, 0.012517186663133536, 0.014090228052786438, 0.015810028811783946, 0.017684616767137284, 0.019741617218170394, 0.021941242309982498, 0.024491841428542615, 0.026481310035816028, 0.033180214660975066
    });

    for (std::size_t i = 0; i < expected.size(); ++i) { EXPECT_TRUE(std::abs(pde_.solution()(i)-expected[i]) < 1e-6); }
}

TEST(transport_test, TestCase3){
    constexpr std::size_t femOrder = 1;

    // define domain
    MeshLoader<Mesh2D> domain("unit_square_32");

    // define vector field containing transport data
    VectorField<2> b_callable;
    b_callable[0] = [](SVector<2> x) -> double { return std::pow(x[1], 2) + 1; };   // y^2 + 1
    b_callable[1] = [](SVector<2> x) -> double { return 2 * x[0]; };                // 2*x

    Integrator<FEM, 2, femOrder> integrator;
    DMatrix<double> quad_nodes = integrator.quadrature_nodes(domain.mesh);
    DMatrix<double, Eigen::RowMajor> b_data(quad_nodes.rows(), 2);
    for(int i = 0; i < quad_nodes.rows(); i++) {
        b_data.row(i) = b_callable(SVector<2>(quad_nodes.row(i)));
    }

    // construct it together with its divergence
    ScalarField<2> div_b_callable = div(b_callable);
    DVector<double> div_b_data(quad_nodes.rows());
    for(int i = 0; i < quad_nodes.rows(); i++) {
        div_b_data(i) = div_b_callable(SVector<2>(quad_nodes.row(i)));
    }

    // coefficients
    DiscretizedVectorField<2,2> b_discretized(b_data, div_b_data);
    double mu = 1e-5;
    double c = 1.;

    // non-zero forcing term
    auto forcingExpr = [](SVector<2> x) -> double { return 1.; };
    ScalarField<2> forcing(forcingExpr);   // wrap lambda expression in ScalarField object

    PDEparameters<decltype(mu), decltype(b_discretized), decltype(c)> &PDEparams =
            PDEparameters<decltype(mu), decltype(b_discretized), decltype(c)>::getInstance(mu, b_discretized, c);

    // define differential operator
    auto L = -mu*laplacian<FEM>() + advection<FEM>(b_discretized) + reaction<FEM>(c);

    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(mu),
            decltype(b_discretized), decltype(c)> pde_( domain.mesh, L); //, forcing );
    pde_.set_forcing(forcing);

    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);

    // set dirichlet conditions
    for (int i = 0; i < nodes_.rows(); ++i) {
        dirichletBC(i) = 0.;
    }
    pde_.set_dirichlet_bc(dirichletBC);
    pde_.set_stab_param(2.85);

    // init solver and solve differential problem
    pde_.init();
    pde_.solve();

    // //storing solution
    // std::ofstream file("fdaPDE_SUPG_sol.txt");
    // if (file.is_open()){
    //     for(int i = 0; i < pde_.solution().rows(); ++i)
    //         file << std::setprecision(17) << pde_.solution()(i) << '\n';
    //     file.close();
    // } else {
    //     std::cerr << "transport test unable to save solution" << std::endl;
    // }

    std::vector<double> expected({
        -0.00028084184430654307, 5.0882399679861227e-05, 7.3300772351308526e-05, 8.2759582109335301e-05, 7.7906525451302961e-05, 5.7709607440751141e-05, 2.7565869716656171e-05, -1.2925364982112896e-06, -1.7685577646705142e-05, -1.8141201427589832e-05, -9.413591266861365e-06, -2.1495567396066048e-06, -5.8793051394613766e-07, -8.6092558882755474e-07, -5.9171519575965858e-07, -3.3609046160271759e-07, -1.842711073004359e-07, -8.1783571171866921e-08, -1.2289153503377841e-08, 3.4830428339789079e-08, 6.64849249428116e-08, 8.7244064688464016e-08, 9.9771521562861332e-08, 1.0356615924516494e-07, 8.9878566559022999e-08, 2.4314783909445941e-08, -2.7967284660539601e-07, -2.0966981760398732e-06, -1.2676369083535788e-05, -6.3068598976947007e-05, -0.00025128754666759714, -0.00075290541390748489, -0.00028134764474601823, 0.00012913942863524165, 0.037660353598055855, 0.071048636658278666, 0.096611801130687153, 0.11144237858308846, 0.11438783358766665, 0.10680486741704048, 0.092462465681672296, 0.076317733472817742, 0.062571765505825119, 0.053081521399098663, 0.047201380802335609, 0.04313952112920183, 0.039664825831618497, 0.036601746720627069, 0.033999958475330251, 0.031761848918756164, 0.029807905456580713, 0.02808642360789719, 0.02655739992453561, 0.025189644375606654, 0.02395846454434189, 0.022844038199614218, 0.021830240170921701, 0.020903747416832822, 0.020053275672032581, 0.019268652405880538, 0.018536711301930062, 0.017814580013286629, 0.016905341272540737, 0.015065625109791486, 0.010267414080065916, 0.0003713696463092698, -2.2097350342883067e-05, 0.02947538911558064, 0.05959613215654043, 0.091292753101467755, 0.12365706920798905, 0.15306111329949421, 0.17370470200506186, 0.18008009532358102, 0.17044876606027423, 0.14894506109066893, 0.12402023731729399, 0.10354821129052708, 0.0903249033529432, 0.082014651522484341, 0.075430822006404594, 0.069663897161420921, 0.064765124327808898, 0.060564310535555971, 0.056905088174183674, 0.05368463082144808, 0.050825229283390852, 0.048267092162226334, 0.045963333929519075, 0.043876580203365767, 0.041976520588186628, 0.040237925938366483, 0.038638603906432374, 0.037154189337798023, 0.035724285407782282, 0.034064243938360585, 0.030943059731099089, 0.022375989688947603, 0.00056987461039376271, 2.3289538982516708e-06, 0.03062686621992302, 0.059886332976922384, 0.087877300577077155, 0.1155704958610884, 0.14446228077614129, 0.17489744910344279, 0.2037503412357132, 0.22374327854692985, 0.22670406800343984, 0.20992223263238186, 0.18026576937573782, 0.1505014949269069, 0.12960736868552433, 0.11695010858437224, 0.10754418593932907, 0.09942010802804721, 0.092533599362199695, 0.086639695300463337, 0.081512579244844327, 0.077002192360274169, 0.072996872587153594, 0.069411641615684902, 0.066180361394256731, 0.063250519409003558, 0.060579272824502678, 0.058129583735141294, 0.055863258622075508, 0.053705082794766677, 0.051322634649167066, 0.047133753276197086, 0.035254060957215075, 0.0007907083897284265, 1.3158479109335434e-07, 0.030310913989956459, 0.059818569949506364, 0.088463676732780772, 0.11597592544623368, 0.14228262818016549, 0.16822974283396999, 0.19554863438746467, 0.22473884582687692, 0.25150298555403733, 0.26583232081327973, 0.25805835226467888, 0.22900857994887538, 0.19277001247951589, 0.16492854342038912, 0.14819656761662506, 0.13627567792817841, 0.12612655323008645, 0.11755307169077005, 0.11022286053922553, 0.1038496230160585, 0.098242048700092802, 0.093259318593246807, 0.088795158441733413, 0.084767228241457271, 0.081109873465566001, 0.077767528695227073, 0.074684496760490188, 0.071765992713031856, 0.068642127318022203, 0.063471446284332045, 0.048610694288748306, 0.0010389052162463859, -7.1337282204725643e-08, 0.030045230707492487, 0.059212209929210537, 0.08759687493754377, 0.11529638296502812, 0.14224244733325425, 0.16812372344915105, 0.19287496526965192, 0.2176299528510057, 0.24444114608287917, 0.27271336810675401, 0.29437369464331775, 0.29567968286721402, 0.27005035406450556, 0.2297443540444277, 0.19617374289254089, 0.17597556400365821, 0.16190074266033991, 0.15004879355389411, 0.140072952786095, 0.13154506601889496, 0.12412882018907434, 0.11759878374769102, 0.11179031461810496, 0.10657978545720342, 0.10187113036452695, 0.097585125996654629, 0.093644304308014958, 0.089927041096566102, 0.086017711973514988, 0.079858176324405783, 0.062206286027777787, 0.0013114613340502164, 2.2987068666726964e-08, 0.029743798278869065, 0.05864072352388678, 0.086741447952442097, 0.11410149045445089, 0.14081551685315724, 0.16696332885260926, 0.19239680911719487, 0.21672008946143029, 0.24013058899505149, 0.26453119309854434, 0.29176143272327359, 0.31713769809456155, 0.32579659363775182, 0.30431324772874946, 0.26140109275433399, 0.22340071969730041, 0.20053147625887849, 0.18469719782631744, 0.17145310499477365, 0.16033788149820755, 0.15082917303348364, 0.14255252738165819, 0.13525592083769886, 0.12875616776068646, 0.12291543128739299, 0.11762332216312804, 0.11277516613234073, 0.10821474921170088, 0.10346336613912789, 0.096246949674104354, 0.075859310784909068, 0.00160613265023975, -3.5927714119377852e-09, 0.029388273364500346, 0.057957088767635001, 0.085769833995789135, 0.11287742661309601, 0.13931680873556868, 0.16514066853014633, 0.19045016457086772, 0.21527239624905548, 0.23928349501679014, 0.2621024527695574, 0.28480664831647778, 0.31021485948422062, 0.33693085838556597, 0.35090403030560613, 0.33300396563526313, 0.28806870694750081, 0.24684909028131083, 0.22214692768972535, 0.20494366497649544, 0.19059992845810322, 0.17858246561535251, 0.16828595248867906, 0.15931021331865206, 0.15138379326644266, 0.1443091000151604, 0.13793337012404761, 0.13211702015319041, 0.12666096479453082, 0.12100304238168189, 0.1126247482751478, 0.08944312913606571, 0.0019218278766544668, -1.6391142908513239e-08, 0.028989107354478773, 0.057185796062607021, 0.084655927095515338, 0.11145871275305237, 0.13764432009717747, 0.16324600388399665, 0.18828687511913419, 0.21283055158233141, 0.23697882257444886, 0.26059702638473492, 0.28312642969352858, 0.30480227797934301, 0.32842957096605552, 0.35519134538675962, 0.37274404466667227, 0.35718133347242542, 0.31022320521396812, 0.2668884702610938, 0.24113144757267421, 0.22291486684430542, 0.20773841742589552, 0.19502729990328962, 0.18411139401367491, 0.17457632005893101, 0.16613663206240614, 0.15857958261684249, 0.15171927466329024, 0.14530369405642518, 0.13866630766000526, 0.12899882949562785, 0.10287709995751582, 0.002258646298879171, -2.6012826641676655e-08, 0.028549682620614084, 0.056335946940143641, 0.08342677233404755, 0.10988255717432509, 0.13575650387915045, 0.16109480322513789, 0.18593071285896051, 0.21027607668350481, 0.23415212207665689, 0.25765517273168043, 0.2808059290849686, 0.30311116365713109, 0.32420033905225631, 0.34635330892189548, 0.37259623716686019, 0.39241840524467253, 0.37761222747450601, 0.32837893868076123, 0.28395831957015805, 0.25780072748035876, 0.23887531659601791, 0.22310196990939496, 0.20987608402965574, 0.19848444995141054, 0.18850691441479914, 0.17964321828119559, 0.17164344996871786, 0.1641890376886076, 0.15648738856915809, 0.14538750553695393, 0.11611572441246558, 0.0026177719461746084, -3.5760083243733433e-08, 0.02807396046512162, 0.055414440908063183, 0.082091213514336264, 0.10816658662267324, 0.13369508939518385, 0.15872349195150881, 0.18329182326268903, 0.20743146916659605, 0.23115291311792918, 0.25445003731919058, 0.27737802240529713, 0.30003927145000514, 0.32210102944305596, 0.34285152742973479, 0.36384891169317302, 0.38945485760740711, 0.41055739784046391, 0.39477979932409157, 0.34305206923504228, 0.29851720378214408, 0.27245764132199013, 0.25307340898239716, 0.23690477388465331, 0.22331311431623205, 0.211563038570731, 0.20122814072304002, 0.19196677194510209, 0.18337384037287771, 0.17450639653143329, 0.1618152987875601, 0.12913855719235887, 0.0030012968463970771, -4.460529528317887e-08, 0.027566229535301842, 0.054429551118826081, 0.080660850706822468, 0.10632378005462018, 0.13147463540385623, 0.15616207746427588, 0.18042674619720278, 0.20430190201692935, 0.22781433780778587, 0.25097534043906361, 0.27376684911200783, 0.29619799311279055, 0.31839047848149338, 0.34017784321579758, 0.3607143618021566, 0.38080035781755023, 0.40592243839419367, 0.42745107640098978, 0.40895942611235486, 0.35475779649222744, 0.31100433136762129, 0.28537949190171158, 0.26573675777741335, 0.24933864931954039, 0.23549838896222963, 0.22346966955970396, 0.21278729959556297, 0.20292914136603696, 0.19277185657765297, 0.17831164709605049, 0.14194246850787487, 0.0034120341128122387, -5.2581531911187216e-08, 0.027030767290956385, 0.053389548632640005, 0.079147766592886873, 0.10436985126266167, 0.12911322072234904, 0.15342821062804782, 0.17735780226285996, 0.20093700254424368, 0.22419268217475702, 0.24714537763413444, 0.26980551536516395, 0.29215275211076164, 0.3141587919100074, 0.33592658049573954, 0.35742365154055011, 0.37779932238697372, 0.3971401783399976, 0.42209557894321237, 0.44313754346802375, 0.42031669028507518, 0.36401196770295174, 0.32181274700181556, 0.29681150794560351, 0.27706792841193867, 0.26056678592542992, 0.2465496715939037, 0.23423183625654168, 0.22294487900047291, 0.21134417189474014, 0.19491213252022896, 0.15453681140325551, 0.003853365833905568, -5.974796358364232e-08, 0.02647181475606623, 0.052302631541837355, 0.077563873522846313, 0.10232026743170164, 0.12662989850474302, 0.15054420889994699, 0.17410787258136082, 0.19735849975337613, 0.2203259355027764, 0.24303138374368422, 0.26548868972487477, 0.28770478253884102, 0.30966151572201772, 0.33130364458661998, 0.35269914722245838, 0.37391145240959944, 0.39413202075030873, 0.41285644466374716, 0.43803474649578283, 0.45747044109304108, 0.42900024597882125, 0.37132265416218202, 0.33127314971812155, 0.30696360161636288, 0.28723615222989307, 0.27070129701147261, 0.25647003341528779, 0.24353692181177203, 0.23030014641736316, 0.21166141297985186, 0.16694132366770073, 0.0043291530668282839, -6.6119023405812097e-08, 0.025893513979036661, 0.051176834461129257, 0.075920892579794896, 0.10019025477202932, 0.12404324895521826, 0.14753203414784133, 0.17070252882661563, 0.1935941926560199, 0.21623965863402578, 0.23866401699072837, 0.26088350268245086, 0.28290566449787413, 0.30473142716245383, 0.326347147590617, 0.34767588104248359, 0.36875166940018911, 0.38970482828395747, 0.40973395962237574, 0.4279954786858387, 0.45374563450619126, 0.47018672146913459, 0.43521104630075946, 0.37716955447780059, 0.33964568332414707, 0.31600300120364022, 0.29634895097248726, 0.2797154349818205, 0.26486012837266631, 0.2497393347072894, 0.2286174491694416, 0.17918625145932324, 0.0048437195144668274, -7.1720468747881692e-08, 0.025299849950866354, 0.050019909748388713, 0.074230178136510658, 0.097994644429363786, 0.12137147450326009, 0.14441314733424299, 0.16716645335501981, 0.18967233482036905, 0.21196555563291195, 0.23407421803860504, 0.25601902151998751, 0.27781176235520683, 0.29945460826949322, 0.32093969389224197, 0.34226218670753383, 0.36331738651378853, 0.38412433590496964, 0.40485747378189474, 0.42461885989238934, 0.4426573891886238, 0.46914597035709943, 0.4809827101543831, 0.43923633575957516, 0.38197495243459267, 0.34711125823364591, 0.32402181281326559, 0.30434575755314891, 0.28710726914436568, 0.26979602560099986, 0.24585722830252166, 0.19131416645322052, 0.0054019109895063937, -7.658404190562965e-08, 0.024694605543240003, 0.048839236827939364, 0.072502574720012689, 0.095747660118809558, 0.11863212845009923, 0.14120840293105871, 0.16352375640855796, 0.18562022528261715, 0.20753435377126497, 0.22929674584502818, 0.25093143918587163, 0.27245508783229383, 0.29387535363219724, 0.31519057968434133, 0.33637920687237088, 0.35745734890373121, 0.37826653753113476, 0.39885745860840971, 0.41940998955140191, 0.4388021161831992, 0.45697706612708677, 0.48404080933487159, 0.48959148175190992, 0.44144356197107143, 0.38606617650218122, 0.35373640630438902, 0.33091082137825384, 0.31060605607687558, 0.29063738859775007, 0.26348746294687841, 0.20338318867134886, 0.00600922987598614, -8.0744253953307024e-08, 0.024081326632603647, 0.047641751951731995, 0.070748309170828819, 0.093462766727704427, 0.11584190052241775, 0.13793773445060312, 0.15979765747227442, 0.18146440315983006, 0.20297587390914926, 0.22436478589583614, 0.24565810315176945, 0.26687625806527743, 0.28803220670447982, 0.30912942983635439, 0.33016543730718878, 0.35109440201655234, 0.37198206772865028, 0.39255642453321138, 0.41299343965617091, 0.43338572431752204, 0.45231769024982427, 0.47108792991446957, 0.49812114554124504, 0.49584300002092524, 0.44223078113497566, 0.38960795921337699, 0.35932972544576686, 0.33590555399341321, 0.31253576499101804, 0.28164304128924689, 0.21547414775226872, 0.006672015084724839, -8.4238017128851061e-08, 0.023463296953833243, 0.04643389639471459, 0.068976909127161687, 0.091152554998421176, 0.11301646268732865, 0.13461994811443795, 0.15601017877953499, 0.17723021210686424, 0.19831889175954176, 0.21931058139880422, 0.24023470928732205, 0.26111508569911479, 0.28196897124198539, 0.30280601618477176, 0.32362479112429859, 0.34442808968962901, 0.36512382928487175, 0.38588558890231345, 0.40621381884171376, 0.42657619352676363, 0.44678953392078646, 0.46523289188249461, 0.48507309205724525, 0.5109852506414273, 0.49967872724506107, 0.44191261509327417, 0.39241598543507705, 0.36292552810493112, 0.33600930995802664, 0.30053428855590936, 0.22768921558224026, 0.0073980009844159577, -8.7103631558262338e-08, 0.022843522051398772, 0.045221582279558158, 0.067197147238969052, 0.088828659234361174, 0.11017035431884864, 0.13127256949399704, 0.15218194594677584, 0.17294151870808733, 0.19359067879359496, 0.21416498887504404, 0.23469582822774659, 0.2552098367094231, 0.27572811470861874, 0.29626514183046238, 0.31682780103279712, 0.33740769907113655, 0.35802486952384649, 0.3784992498728541, 0.399218548656192, 0.41925880843039992, 0.43964712099128345, 0.45961207639944218, 0.47764969980714017, 0.49891055536327245, 0.5221578747290393, 0.5010704631437185, 0.4404500804271067, 0.39335939171005163, 0.36103850303812457, 0.32060920086803313, 0.24017366040789118, 0.0081962060851778432, -8.9381417877542308e-08, 0.022224721260659698, 0.044010174108776182, 0.06541700874934997, 0.086501706250357469, 0.10731690643265332, 0.1279117353939844, 0.14833203935733147, 0.16862051744777498, 0.18881674180357105, 0.20895704842105778, 0.22907427630054408, 0.24919732617937823, 0.26935050374735503, 0.28955259769859537, 0.3098156272497557, 0.33014458065968338, 0.35051976337346163, 0.37099983778891776, 0.39124437441042448, 0.41203530132948196, 0.4317041572369123, 0.45223748294033439, 0.47183740887373127, 0.48968057991910674, 0.5124058882588689, 0.53103941510018593, 0.49971897257781611, 0.43671211071067151, 0.3884372580781742, 0.34193098983115289, 0.25324990284992771, 0.0090765422342873516, -9.1106459659901114e-08, 0.021609326915572991, 0.042804484553512975, 0.06364368048086938, 0.084181293270730151, 0.10446820308409122, 0.12455213185376789, 0.14447789987233126, 0.16428759341770088, 0.18402063411249059, 0.20371373599341944, 0.2234007306341825, 0.24311223402201798, 0.26287512152110704, 0.28271177000413961, 0.30263900686029288, 0.32266658967283945, 0.34279907714846697, 0.36299774532030493, 0.38339456572654368, 0.40337284648510502, 0.42439740000266263, 0.44355234914290997, 0.46435636801449193, 0.48344295508879587, 0.50137917757111738, 0.52506113323511872, 0.53661829039966524, 0.49417583170704343, 0.42630534304261714, 0.3647106741413767, 0.26704272024334924, 0.010062757736017348, -9.2341152650281383e-08, 0.020999488167036912, 0.041608779378103283, 0.061883553629491696, 0.081875984786936515, 0.10163506774717232, 0.1212069644850966, 0.14063527607222867, 0.15996123707977711, 0.17922382518453614, 0.19845977447479216, 0.21770347574041762, 0.23698674075087736, 0.25633840002945807, 0.27578369516516199, 0.29534341891513471, 0.31503273123263864, 0.33485912009228397, 0.35482901317010151, 0.37487268292997833, 0.3952462368386111, 0.41488445101898219, 0.43637809521743098, 0.45478651469806036, 0.47596807053378726, 0.49436443041148098, 0.51257164972046532, 0.5357127957436838, 0.53651812116395814, 0.47935813624729118, 0.39511233973577226, 0.28147329418188233, 0.011173648810915152, -9.3004765486082482e-08, 0.020397085277345284, 0.040426803343225903, 0.06014225852353202, 0.079593352699433503, 0.098827104194582585, 0.11788799385029482, 0.1368182458959406, 0.15565804147324297, 0.17444565943607304, 0.19321753519152157, 0.2120082237073628, 0.23085024716079972, 0.24977380077332115, 0.26880628195137779, 0.28797159827089874, 0.30728920306230795, 0.32677279086195288, 0.34642724627813748, 0.36626405359871328, 0.3861662674477267, 0.40658094324121635, 0.425756711274211, 0.44806550163798231, 0.46534673731999004, 0.48693641206675564, 0.5043587361146461, 0.52242662586513733, 0.54147879846834313, 0.52424415946463077, 0.43953981293637689, 0.30018980969508863, 0.012373052824157729, -9.3775487721596749e-08, 0.019803718582096459, 0.039261756009744166, 0.058424623965059465, 0.077339916930880728, 0.096052617810645446, 0.1146054384196626, 0.13303910247012574, 0.15139257005163806, 0.16970319976036108, 0.18800684121113209, 0.20633784660600968, 0.2247289851975692, 0.24321123852154355, 0.26181344665199069, 0.28056176611544115, 0.29947888913658427, 0.31858297038648692, 0.3378862504475012, 0.35739020694927853, 0.3771151244802699, 0.39687795320920172, 0.41739368511696001, 0.43592378426411293, 0.45955556784103635, 0.47506935056935312, 0.49687173837198478, 0.51259307920455721, 0.52831186857912005, 0.53481154873473291, 0.48161127608246246, 0.32871057469166359, 0.013824102937596181, -9.1137809216464829e-08, 0.019220849003184153, 0.038116566276917369, 0.056735085744711596, 0.075121681227613757, 0.093319259624421586, 0.111368692107934, 0.12930909410392036, 0.14717805349714561, 0.16501180384403263, 0.18284533631676902, 0.20071244079082237, 0.21864566317842518, 0.23667616249386236, 0.25483344583153289, 0.27314495066310862, 0.29163543110465101, 0.31032609008999534, 0.32923339921801281, 0.34836776087653032, 0.36772583286203192, 0.38734014456790811, 0.40694368179772056, 0.42759235595175876, 0.44522021096793812, 0.47090818252477051, 0.48352874331972312, 0.50471222785314951, 0.51651592768938026, 0.52275269294262039, 0.49558318300203585, 0.3584101392832747, 0.015993370173361263, -1.0551423721966455e-07, 0.018649146912942675, 0.036992619317700003, 0.055075781476582812, 0.072941613137676012, 0.090630958464442107, 0.10818283076009007, 0.12563466781153465, 0.14302253876563209, 0.16038130315322166, 0.17774472008813563, 0.19514550053632501, 0.21261529008272237, 0.23018456681466679, 0.24788243886327749, 0.26573632405039294, 0.28377148364415566, 0.30201036206063253, 0.32047166065945831, 0.33916907181462586, 0.35811016401145435, 0.37728479678406335, 0.39673967519273118, 0.41611301821697588, 0.43684642024875153, 0.45322997147104693, 0.4819932805083682, 0.48962374265268638, 0.50761564350881616, 0.50888546693859527, 0.4855135063829274, 0.37047636007298129, 0.018619584914282283, -1.5683075672387836e-08, 0.018092220242607079, 0.035896980327875062, 0.053457276317944211, 0.070813728018139926, 0.088004925500420508, 0.10506773486841972, 0.12203755159624667, 0.13894849750568383, 0.15583355881553609, 0.17272466569892483, 0.18965271157717875, 0.20664750368064316, 0.22373763377100794, 0.2409502666316084, 0.25831085852113256, 0.27584281893591606, 0.29356709898965355, 0.31150163303908934, 0.32966050530464069, 0.3480526985112215, 0.36668145081004311, 0.3855279411632016, 0.40465253817278052, 0.42360289895812159, 0.44418994663418088, 0.45888960259002104, 0.49203801549509779, 0.49051327851915372, 0.4981251940035652, 0.47020035564221635, 0.36353506483228104, 0.020533002793998122, -5.7028772544130863e-07, 0.017535275078126737, 0.034801351201732479, 0.051837899960946579, 0.0686835369521515, 0.085375267346735048, 0.10194848364894397, 0.11843688374539377, 0.13487230382969267, 0.15128452514400881, 0.16770115936655447, 0.18414770326846108, 0.20064776935216677, 0.2172233898634944, 0.23389523299037135, 0.25068261282502313, 0.2676032934409488, 0.28467318686495063, 0.30190603159731039, 0.31931300661854672, 0.33690207909079345, 0.35467679485766446, 0.37263623106176103, 0.3907537575688898, 0.40910120864838223, 0.42716360499727773, 0.44700904636246097, 0.45947605706614852, 0.49841001339135665, 0.4789494701284101, 0.45714832426336671, 0.34998863947864756, 0.021397854598227923, 3.0261463969024876e-06, 0.017072819287722602, 0.033885788881055236, 0.050481783556965552, 0.066894809535251162, 0.083154418052034398, 0.099286857125786235, 0.115316174767747, 0.13126503789646377, 0.14715502634516922, 0.16300640424825685, 0.17883764091299292, 0.19466505236352263, 0.21050279217455908, 0.22636314105017322, 0.24225684184463772, 0.25819325860801751, 0.27418036742280338, 0.29022479117961342, 0.30633204605735537, 0.32250686200858841, 0.33875310650608415, 0.35507267917238683, 0.37146581545634066, 0.38790565083494716, 0.40447368475080903, 0.42064996579969161, 0.43852926309808504, 0.44810857424001022, 0.49353926635787571, 0.43679507399034068, 0.33707328166957701, 0.021837020876994895, -2.1230070449329125e-05, 0.016113555216213521, 0.032034269716586586, 0.047759881149453891, 0.063325363538139973, 0.078770519978858491, 0.094133477123634846, 0.10944598337958646, 0.12472884496042093, 0.13998731393007749, 0.15520763711870425, 0.17035670797545865, 0.18538635800581066, 0.20024227348161186, 0.21487547176075319, 0.22925280510827012, 0.24336301973863192, 0.25721664528317029, 0.2708405775731893, 0.2842702283639002, 0.29754245995702283, 0.31069117780946859, 0.32374545380441777, 0.33672853673742364, 0.34965945629310019, 0.36252799657742601, 0.37542241713671382, 0.38790066450654687, 0.40174384415439812, 0.40777533487900858, 0.45748269834367983, 0.31974541722308814, 0.022307458991470665, 0.00015345216636463316, 0.018561811641639711, 0.036546827410790704, 0.054221420795942374, 0.071538914660079028, 0.088329429627340153, 0.1043540418201969, 0.11936847822810777, 0.13318413106025201, 0.14571233227776878, 0.15698103883209674, 0.16712094081141868, 0.17632776312087495, 0.18481506673598935, 0.19277367713254814, 0.20034910453640281, 0.20763942717506581, 0.21470762211867694, 0.22159827700554732, 0.22835020304053849, 0.23500160402157244, 0.24158944137822458, 0.24814674365468986, 0.25470063244948388, 0.26127138948413248, 0.26787446820247846, 0.27450222101170824, 0.28121374787708203, 0.28772199474520121, 0.29510066943748303, 0.29746657995318432, 0.34064028656040912, 0.022389902598029837, -0.00057582007000223198, -2.2004026166168632e-05, -1.8647101384488366e-05, -1.7572790796924851e-05, 8.4348654043336325e-06, 6.881443378209333e-05, 0.00017182430986209093, 0.00032392058707872093, 0.00052889322697210561, 0.00078767678892492838, 0.0010989725853600839, 0.0014604793329995739, 0.0018702655537291906, 0.0023277583080239836, 0.0028340187962779925, 0.003391331014532322, 0.0040024478319414152, 0.0046699405591090239, 0.0053959422592218392, 0.0061822866847110426, 0.0070308223708459997, 0.007943651825729833, 0.0089231806407658598, 0.0099720217453404328, 0.011092865114262086, 0.012288328277813444, 0.013561161204142049, 0.014912213670705969, 0.016349006595187329, 0.017848676308155034, 0.019505407465411934, 0.020840207704525378, 0.024901128119642596
    });

    for (std::size_t i = 0; i < expected.size(); ++i) { EXPECT_TRUE(std::abs(pde_.solution()(i)-expected[i]) < 1e-6); }
}

TEST(transport_test, TestCase4) {
    constexpr std::size_t femOrder = 2;

    // define exact solution
    auto solutionExpr = [](SVector<2> x) -> double {
        return 3*sin(x[0]) + 2*x[1];
    };

    SVector<2> b;  b << 1., 1.;
    double mu = 1e-1;

    // non-zero forcing term
    auto forcingExpr = [&mu, &b](SVector<2> x) -> double {
        return 2*b[1] + 3*b[0]*cos(x[0]) + 3*mu*sin(x[0]);
    };
    ScalarField<2> forcing(forcingExpr);   // wrap lambda expression in ScalarField object

    // save parameters in the PDEparameters singleton, these will be retrieved by the solver
    PDEparameters<decltype(mu), decltype(b)>::destroyInstance();
    PDEparameters<decltype(mu), decltype(b)> &PDEparams =
            PDEparameters<decltype(mu), decltype(b)>::getInstance(mu, b);

    auto L = - mu * laplacian<FEM>() + advection<FEM>(b);
    MeshLoader<Mesh2D> unit_square("unit_square_16");

    PDE< decltype(unit_square.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(mu),
            decltype(b)> pde_( unit_square.mesh, L); //, forcing);
    pde_.set_forcing(forcing);

    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);
    DMatrix<double> solution_ex(nodes_.rows(), 1);

    // set exact sol & dirichlet conditions
    for (int i = 0; i < nodes_.rows(); ++i) {
        solution_ex(i) = solutionExpr(nodes_.row(i));
        dirichletBC(i) = solutionExpr(nodes_.row(i));
    }
    pde_.set_dirichlet_bc(dirichletBC);
    pde_.set_stab_param(1.0);
    // init solver and solve differential problem
    pde_.init();
    pde_.solve();

    // check computed error
    DMatrix<double> error_ = solution_ex - pde_.solution();
    double error_L2 = (pde_.mass() * error_.cwiseProduct(error_)).sum();
    EXPECT_TRUE(error_L2 < 1e-7);

    // // storing solution
    // std::ofstream file("fdaPDE_sol.txt");
    // if (file.is_open()){
    //     for(int i = 0; i < pde_.solution().rows(); ++i)
    //         file << pde_.solution()(i) << '\n';
    //     file.close();
    // } else {
    //     std::cerr << "transport test unable to save solution" << std::endl;
    // }
}

// _______________ convergence tests _______________
TEST(transport_test, convergence_test_0) {
    constexpr std::size_t femOrder = 1;

    int num_refinements = 4;
    DMatrix<int> N(num_refinements, 1);   // number of refinements
    N << 16, 32, 64, 128;
    DMatrix<double> order(num_refinements - 1, 1);
    DVector<double> error_L2(num_refinements);
    error_L2.setZero();

    // define PDE parameters
    VectorField<2> b_callable;
    b_callable[0] = [](SVector<2> x) -> double { return std::pow(x[1], 2) + 1; };   // y^2 + 1
    b_callable[1] = [](SVector<2> x) -> double { return 2 * x[0]; };                // 2*x

    double nu = 1e-9;
    double c = 1.;

    constexpr double pi = 3.14159265358979323846;
    auto solutionExpr = [&pi](SVector<2> x) -> double {
        return std::sin(2 * pi * x[0]) * std::sin(2 * pi * x[1]);
    };
    auto forcingExpr = [&pi, &b_callable, &nu, &c](SVector<2> x) -> double {
        return 2*pi*b_callable[0](x)*std::sin(2*pi*x[1])*std::cos(2*pi*x[0])
            + 2*pi*b_callable[1](x)*std::sin(2*pi*x[0])*std::cos(2*pi*x[1])
            + c*std::sin(2*pi*x[0])*std::sin(2*pi*x[1]) + 8*pi*pi*nu*std::sin(2*pi*x[0])*sin(2*pi*x[1]);
    };
    ScalarField<2> forcing(forcingExpr);

    for (int n = 0; n < num_refinements; ++n) {
        std::string domain_name = "unit_square_" + std::to_string(N(n));
        MeshLoader<Mesh2D> domain(domain_name);

        // dicretize b_callable -> discretized_vector_field
        Integrator<FEM, 2, femOrder> integrator;
        DMatrix<double> quad_nodes = integrator.quadrature_nodes(domain.mesh);
        DMatrix<double, Eigen::RowMajor> b_data(quad_nodes.rows(), 2);
        for(int i = 0; i < quad_nodes.rows(); i++) {
            b_data.row(i) = b_callable(SVector<2>(quad_nodes.row(i)));
        }

        // construct discretized transport field together with its divergence
        ScalarField<2> div_b_callable = div(b_callable);
        DVector<double> div_b_data(quad_nodes.rows());
        for(int i = 0; i < quad_nodes.rows(); i++) {
            div_b_data(i) = div_b_callable(SVector<2>(quad_nodes.row(i)));
        }

        DiscretizedVectorField<2,2> b_discretized(b_data, div_b_data);

        PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)>::destroyInstance();
        PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)> &PDEparams =
                PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)>::getInstance(nu, b_discretized, c);

        // define differential operator
        auto L = -nu*laplacian<FEM>() + advection<FEM>(b_discretized) + reaction<FEM>(c);

        // PDE<decltype(unit_square.mesh), decltype(L), DMatrix<double>, FEM, fem_order<1>> pde_(unit_square.mesh, times);
        PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b_discretized), decltype(c)> pde_( domain.mesh, L); //, forcing );
        pde_.set_forcing(forcing);

        // compute boundary condition and exact solution
        DMatrix<double> nodes_ = pde_.dof_coords();
        DMatrix<double> dirichletBC(nodes_.rows(), 1);

        DMatrix<double> solution_ex(nodes_.rows(), 1);

        // set dirichlet conditions
        for (int i = 0; i < nodes_.rows(); ++i) {
            solution_ex(i) = solutionExpr(nodes_.row(i));
            dirichletBC(i) = solutionExpr(nodes_.row(i));
        }
        pde_.set_dirichlet_bc(dirichletBC);
        pde_.set_stab_param(2.);

        // init solver and solve differential problem
        pde_.init();
        pde_.solve();

        // check computed error
        DMatrix<double> error_ = solution_ex - pde_.solution();
        error_L2(n) = (pde_.mass() * error_.cwiseProduct(error_)).sum();

        // std::cout << "error_L2 = " << std::setprecision(17) << error_L2(n) << std::endl;
        // //storing solution
        // std::ofstream file("fdaPDE_SUPG_sol.txt");
        // if (file.is_open()){
        //     for(int i = 0; i < pde_.solution().rows(); ++i)
        //         file << pde_.solution()(i) << '\n';
        //     file.close();
        // } else {
        //     std::cerr << "transport test unable to save solution" << std::endl;
        // }
    } // end refinement loop

    for (int nn = 1; nn < num_refinements; ++nn) {
        order(nn - 1) = std::log2(error_L2(nn - 1) / error_L2(nn));
        EXPECT_TRUE(floor(order(nn - 1)) >= 1);
    }
}

TEST(transport_test, convergence_test_1) {
    constexpr std::size_t femOrder = 1;
    double stabParam = 4.705;
    int num_refinements = 4;
    DMatrix<int> N(num_refinements, 1);   // number of refinements
    N << 16, 32, 64, 128;
    DMatrix<double> order(num_refinements - 1, 1);
    DVector<double> error_L2(num_refinements);
    error_L2.setZero();

    // define PDE parameters
    VectorField<2> b_callable;
    b_callable[0] = [](SVector<2> x) -> double { return std::pow(x[1], 2) + 1; };   // y^2 + 1
    b_callable[1] = [](SVector<2> x) -> double { return 2 * x[0]; };                // 2*x

    double nu = 1e-9;
    double c = 1.;

    // define exact solution and forcing
    double BL = 0.1;   // parameter for boundary layer thickness
    auto solutionExpr = [&nu, &BL](SVector<2> x) -> double {
        return x[0]*x[1]*x[1] - x[1]*x[1]*exp((2*(x[0] - 1))/BL) - x[0]*exp(3*(x[1] - 1)/BL) + exp((2*(x[0] - 1) + 3*(x[1] - 1))/BL);
    };
    auto forcingExpr = [&nu, &BL, &b_callable, &c](SVector<2> x) -> double {
        return (BL*BL*c*(x[0]*x[1]*x[1] - x[0]*exp(3*(x[1] - 1)/BL) - x[1]*x[1]*exp(2*(x[0] - 1)/BL) + exp((2*x[0] + 3*x[1] - 5)/BL))
            + BL*(b_callable[0](x)*(BL*(x[1]*x[1] - exp(3*(x[1] - 1)/BL)) - 2*x[1]*x[1]*exp(2*(x[0] - 1)/BL) + 2*exp((2*x[0] + 3*x[1] - 5)/BL))
            + b_callable[1](x)*(2*BL*x[1]*(x[0] - exp(2*(x[0] - 1)/BL)) - 3*x[0]*exp(3*(x[1] - 1)/BL) + 3*exp((2*x[0] + 3*x[1] - 5)/BL)))
            + nu*(2*BL*BL*(-x[0] + exp(2*(x[0] - 1)/BL)) + 9*x[0]*exp(3*(x[1] - 1)/BL) + 4*x[1]*x[1]*exp(2*(x[0] - 1)/BL)
            - 13*exp((2*x[0] + 3*x[1] - 5)/BL)))/(BL*BL);
    };
    ScalarField<2> forcing(forcingExpr);

    for (int n = 0; n < num_refinements; ++n) {
        std::string domain_name = "unit_square_" + std::to_string(N(n));
        MeshLoader<Mesh2D> domain(domain_name);

        // dicretize b_callable -> discretized_vector_field
        Integrator<FEM, 2, femOrder> integrator;
        DMatrix<double> quad_nodes = integrator.quadrature_nodes(domain.mesh);
        DMatrix<double, Eigen::RowMajor> b_data(quad_nodes.rows(), 2);
        for(int i = 0; i < quad_nodes.rows(); i++) {
            b_data.row(i) = b_callable(SVector<2>(quad_nodes.row(i)));
        }

        // construct discretized transport field together with its divergence
        ScalarField<2> div_b_callable = div(b_callable);
        DVector<double> div_b_data(quad_nodes.rows());
        for(int i = 0; i < quad_nodes.rows(); i++) {
            div_b_data(i) = div_b_callable(SVector<2>(quad_nodes.row(i)));
        }

        DiscretizedVectorField<2,2> b_discretized(b_data, div_b_data);

        PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)>::destroyInstance();
        PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)> &PDEparams =
                PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)>::getInstance(nu, b_discretized, c);

        // define differential operator
        auto L = -nu*laplacian<FEM>() + advection<FEM>(b_discretized) + reaction<FEM>(c);

        // PDE<decltype(unit_square.mesh), decltype(L), DMatrix<double>, FEM, fem_order<1>> pde_(unit_square.mesh, times);
        PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b_discretized), decltype(c)> pde_( domain.mesh, L); //, forcing );
        pde_.set_forcing(forcing);  

        // compute boundary condition and exact solution
        DMatrix<double> nodes_ = pde_.dof_coords();
        DMatrix<double> dirichletBC(nodes_.rows(), 1);

        DMatrix<double> solution_ex(nodes_.rows(), 1);

        // set dirichlet conditions
        for (int i = 0; i < nodes_.rows(); ++i) {
            solution_ex(i) = solutionExpr(nodes_.row(i));
            dirichletBC(i) = solutionExpr(nodes_.row(i));
        }
        pde_.set_dirichlet_bc(dirichletBC);
        pde_.set_stab_param(stabParam);

        // init solver and solve differential problem
        pde_.init();
        pde_.solve();

        // check computed error
        DMatrix<double> error_ = solution_ex - pde_.solution();
        error_L2(n) = (pde_.mass() * error_.cwiseProduct(error_)).sum();

        // //storing solution
        // std::ofstream file("fdaPDE_SUPG_sol.txt");
        // if (file.is_open()){
        //     for(int i = 0; i < pde_.solution().rows(); ++i)
        //         file << pde_.solution()(i) << '\n';
        //     file.close();
        // } else {
        //     std::cerr << "transport test unable to save solution" << std::endl;
        // }
        // }
    } // end refinement loop

    for (int n = 1; n < num_refinements; ++n) {
        order(n - 1) = std::log2(error_L2(n - 1) / error_L2(n));
        EXPECT_TRUE(floor(order(n - 1)) >= 1);
    }
}

TEST(transport_test, convergence_test_2) {
    constexpr std::size_t femOrder = 2;
    double stabParam = 4.705;
    int num_refinements = 3;
    DMatrix<int> N(num_refinements, 1);   // number of refinements
    N << 16, 32, 64;
    DMatrix<double> order(num_refinements - 1, 1);
    DVector<double> error_L2(num_refinements);
    error_L2.setZero();

    // define PDE parameters
    VectorField<2> b_callable;
    b_callable[0] = [](SVector<2> x) -> double { return std::pow(x[1], 2) + 1; };   // y^2 + 1
    b_callable[1] = [](SVector<2> x) -> double { return 2 * x[0]; };                // 2*x

    double nu = 1e-3;
    double c = 1.;

    // define exact solution and forcing
    double BL = 0.1;   // parameter for boundary layer thickness
    auto solutionExpr = [&nu, &BL](SVector<2> x) -> double {
        return x[0]*x[1]*x[1] - x[1]*x[1]*exp((2*(x[0] - 1))/BL) - x[0]*exp(3*(x[1] - 1)/BL) + exp((2*(x[0] - 1) + 3*(x[1] - 1))/BL);
    };
    auto forcingExpr = [&nu, &BL, &b_callable, &c](SVector<2> x) -> double {
        return (BL*BL*c*(x[0]*x[1]*x[1] - x[0]*exp(3*(x[1] - 1)/BL) - x[1]*x[1]*exp(2*(x[0] - 1)/BL) + exp((2*x[0] + 3*x[1] - 5)/BL))
            + BL*(b_callable[0](x)*(BL*(x[1]*x[1] - exp(3*(x[1] - 1)/BL)) - 2*x[1]*x[1]*exp(2*(x[0] - 1)/BL) + 2*exp((2*x[0] + 3*x[1] - 5)/BL))
            + b_callable[1](x)*(2*BL*x[1]*(x[0] - exp(2*(x[0] - 1)/BL)) - 3*x[0]*exp(3*(x[1] - 1)/BL) + 3*exp((2*x[0] + 3*x[1] - 5)/BL)))
            + nu*(2*BL*BL*(-x[0] + exp(2*(x[0] - 1)/BL)) + 9*x[0]*exp(3*(x[1] - 1)/BL) + 4*x[1]*x[1]*exp(2*(x[0] - 1)/BL)
            - 13*exp((2*x[0] + 3*x[1] - 5)/BL)))/(BL*BL);
    };
    ScalarField<2> forcing(forcingExpr);

    for (int n = 0; n < num_refinements; ++n) {
        std::string domain_name = "unit_square_" + std::to_string(N(n));
        MeshLoader<Mesh2D> domain(domain_name);

        // dicretize b_callable -> discretized_vector_field
        Integrator<FEM, 2, femOrder> integrator;
        DMatrix<double> quad_nodes = integrator.quadrature_nodes(domain.mesh);
        DMatrix<double, Eigen::RowMajor> b_data(quad_nodes.rows(), 2);
        for(int i = 0; i < quad_nodes.rows(); i++) {
            b_data.row(i) = b_callable(SVector<2>(quad_nodes.row(i)));
        }

        // construct discretized transport field together with its divergence
        ScalarField<2> div_b_callable = div(b_callable);
        DVector<double> div_b_data(quad_nodes.rows());
        for(int i = 0; i < quad_nodes.rows(); i++) {
            div_b_data(i) = div_b_callable(SVector<2>(quad_nodes.row(i)));
        }

        DiscretizedVectorField<2,2> b_discretized(b_data, div_b_data);

        PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)>::destroyInstance();
        PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)> &PDEparams =
                PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)>::getInstance(nu, b_discretized, c);

        // define differential operator
        auto L = -nu*laplacian<FEM>() + advection<FEM>(b_discretized) + reaction<FEM>(c);

        PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b_discretized), decltype(c)> pde_( domain.mesh, L); //, forcing );
        pde_.set_forcing(forcing);

        // compute boundary condition and exact solution
        DMatrix<double> nodes_ = pde_.dof_coords();
        DMatrix<double> dirichletBC(nodes_.rows(), 1);

        DMatrix<double> solution_ex(nodes_.rows(), 1);

        // set dirichlet conditions
        for (int i = 0; i < nodes_.rows(); ++i) {
            solution_ex(i) = solutionExpr(nodes_.row(i));
            dirichletBC(i) = solutionExpr(nodes_.row(i));
        }
        pde_.set_dirichlet_bc(dirichletBC);
        pde_.set_stab_param(stabParam);

        // init solver and solve differential problem
        pde_.init();
        pde_.solve();

        // check computed error
        DMatrix<double> error_ = solution_ex - pde_.solution();
        error_L2(n) = (pde_.mass() * error_.cwiseProduct(error_)).sum();

        // std::cout << "error_L2 = " << std::setprecision(17) << error_L2(n) << std::endl;
        // //storing solution
        // std::ofstream file("fdaPDE_SUPG_sol.txt");
        // if (file.is_open()){
        //     for(int i = 0; i < pde_.solution().rows(); ++i)
        //         file << pde_.solution()(i) << '\n';
        //     file.close();
        // } else {
        //     std::cerr << "transport test unable to save solution" << std::endl;
        // }
    } // end refinement loop

    for (int n = 1; n < num_refinements; ++n) {
        order(n - 1) = std::log2(error_L2(n - 1) / error_L2(n));
        EXPECT_TRUE(floor(order(n - 1)) >= 2);
    }
}